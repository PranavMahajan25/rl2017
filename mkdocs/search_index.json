{
    "docs": [
        {
            "location": "/",
            "text": "Reinforcement Learning\n\n\nClick on the module numbers on the left panel to access the tutorials.",
            "title": "Home"
        },
        {
            "location": "/#reinforcement-learning",
            "text": "Click on the module numbers on the left panel to access the tutorials.",
            "title": "Reinforcement Learning"
        },
        {
            "location": "/environment-setup/",
            "text": "Linux Installation\n\n\nIf you are using any Linux systems (like Ubuntu) or Mac, please open the terminal and type \npython\n to find out if it is already installed and which version is installed. Newer versions of Ubuntu have both Python2 and Python3 installed. Later versions of Mac, only have python2 installed, which can be sorted within the class.\n\n\nAs said, there is a very low chance of python not being there. If this is the case, follow these simple steps to install Python:\n\n\n\n\n\n\nOpen a Web browser and go to https://www.python.org/downloads/.\n\n\n\n\n\n\nFollow the link to download zipped source code available for Unix/Linux.\n\n\n\n\n\n\nDownload and extract files.\n\n\n\n\n\n\nEditing the Modules/Setup file if you want to customize some options.\n\n\n\n\n\n\nrun ./configure script\n\n\n\n\n\n\nmake\n\n\n\n\n\n\nmake install\n\n\n\n\n\n\nThis installs Python at standard location /usr/local/bin and its libraries at /usr/local/lib/pythonXX where XX is the version of Python.\n\n\nWindows Installation\n\n\n\n\n\n\nOpen a Web browser and type \nPython Installer\n\n\n\n\n\n\nClick the installer to install Python in the system. \n\n\n\n\n\n\nYou will be able to run code in the Python IDLE terminal which comes along with the install. Python IDLE is a unix-like shell which also allows you to use bash commands, and hence it is preferable to use IDLE.\n\n\n\n\n\n\nNOT NECESSARY: If by any chance you want to run from the command prompt, you will have to set the environment variables on Windows.\n\n\nPackage Installer\n\n\nEITHER pip or conda can be used for this purpose. pip comes natively with the python installation. Check if it is present by typing either \npip\n or \nconda\n on the terminal. If you don't have one, please contact the instructor of the course.\n\n\nFor a package installation, type the following command in the terminal depending on the package installer you have\n\n\n<package installer> install <package>\n\n\n\n\n\nwhere \n can be conda or pip. \n will be the package you desire to install.\n\n\nFor example, in the next tutorial, you will have to install numpy which can be done by the following command:\n\n\npip install numpy\n\n\n\n\n\nVirtual Environments\n\n\nWe'll be covering this in the class, when the need arises, to avoid confusion.",
            "title": "Environment Setup"
        },
        {
            "location": "/environment-setup/#linux-installation",
            "text": "If you are using any Linux systems (like Ubuntu) or Mac, please open the terminal and type  python  to find out if it is already installed and which version is installed. Newer versions of Ubuntu have both Python2 and Python3 installed. Later versions of Mac, only have python2 installed, which can be sorted within the class.  As said, there is a very low chance of python not being there. If this is the case, follow these simple steps to install Python:    Open a Web browser and go to https://www.python.org/downloads/.    Follow the link to download zipped source code available for Unix/Linux.    Download and extract files.    Editing the Modules/Setup file if you want to customize some options.    run ./configure script    make    make install    This installs Python at standard location /usr/local/bin and its libraries at /usr/local/lib/pythonXX where XX is the version of Python.",
            "title": "Linux Installation"
        },
        {
            "location": "/environment-setup/#windows-installation",
            "text": "Open a Web browser and type  Python Installer    Click the installer to install Python in the system.     You will be able to run code in the Python IDLE terminal which comes along with the install. Python IDLE is a unix-like shell which also allows you to use bash commands, and hence it is preferable to use IDLE.    NOT NECESSARY: If by any chance you want to run from the command prompt, you will have to set the environment variables on Windows.",
            "title": "Windows Installation"
        },
        {
            "location": "/environment-setup/#package-installer",
            "text": "EITHER pip or conda can be used for this purpose. pip comes natively with the python installation. Check if it is present by typing either  pip  or  conda  on the terminal. If you don't have one, please contact the instructor of the course.  For a package installation, type the following command in the terminal depending on the package installer you have  <package installer> install <package>  where   can be conda or pip.   will be the package you desire to install.  For example, in the next tutorial, you will have to install numpy which can be done by the following command:  pip install numpy",
            "title": "Package Installer"
        },
        {
            "location": "/environment-setup/#virtual-environments",
            "text": "We'll be covering this in the class, when the need arises, to avoid confusion.",
            "title": "Virtual Environments"
        },
        {
            "location": "/python-numpy-tutorial/",
            "text": "This tutorial was contributed by \nJustin Johnson\n.\n\n\nWe will use the Python programming language for all assignments in this course.\nPython is a great general-purpose programming language on its own, but with the\nhelp of a few popular libraries (numpy, scipy, matplotlib) it becomes a powerful\nenvironment for scientific computing.\n\n\nWe expect that many of you will have some experience with Python and numpy;\nfor the rest of you, this section will serve as a quick crash course both on\nthe Python programming language and on the use of Python for scientific\ncomputing.\n\n\nSome of you may have previous knowledge in Matlab, in which case we also recommend the \nnumpy for Matlab users\n page.\n\n\nYou can also find an \nIPython notebook version of this tutorial here\n created by \nVolodymyr Kuleshov\n and \nIsaac Caswell\n for \nCS 228\n.\n\n\nTable of contents:\n\n\n\n\nPython\n\n\nBasic data types\n\n\nContainers\n\n\nLists\n\n\nDictionaries\n\n\nSets\n\n\nTuples\n\n\n\n\n\n\nFunctions\n\n\nClasses\n\n\nNumpy\n\n\nArrays\n\n\nArray indexing\n\n\nDatatypes\n\n\nArray math\n\n\nBroadcasting\n\n\nSciPy\n\n\nImage operations\n\n\nMATLAB files\n\n\nDistance between points\n\n\nMatplotlib\n\n\nPlotting\n\n\nSubplots\n\n\nImages\n\n\n\n\n\n\nPython\n\n\nPython is a high-level, dynamically typed multiparadigm programming language.\nPython code is often said to be almost like pseudocode, since it allows you\nto express very powerful ideas in very few lines of code while being very\nreadable. As an example, here is an implementation of the classic quicksort\nalgorithm in Python:\n\n\ndef\n \nquicksort\n(\narr\n):\n\n    \nif\n \nlen\n(\narr\n)\n \n<=\n \n1\n:\n\n        \nreturn\n \narr\n\n    \npivot\n \n=\n \narr\n[\nlen\n(\narr\n)\n \n//\n \n2\n]\n\n    \nleft\n \n=\n \n[\nx\n \nfor\n \nx\n \nin\n \narr\n \nif\n \nx\n \n<\n \npivot\n]\n\n    \nmiddle\n \n=\n \n[\nx\n \nfor\n \nx\n \nin\n \narr\n \nif\n \nx\n \n==\n \npivot\n]\n\n    \nright\n \n=\n \n[\nx\n \nfor\n \nx\n \nin\n \narr\n \nif\n \nx\n \n>\n \npivot\n]\n\n    \nreturn\n \nquicksort\n(\nleft\n)\n \n+\n \nmiddle\n \n+\n \nquicksort\n(\nright\n)\n\n\n\nprint\n(\nquicksort\n([\n3\n,\n6\n,\n8\n,\n10\n,\n1\n,\n2\n,\n1\n]))\n\n\n# Prints \"[1, 1, 2, 3, 6, 8, 10]\"\n\n\n\n\n\n\nPython versions\n\n\nThere are currently two different supported versions of Python, 2.7 and 3.5.\nSomewhat confusingly, Python 3.0 introduced many backwards-incompatible changes\nto the language, so code written for 2.7 may not work under 3.5 and vice versa.\nFor this class all code will use Python 3.5.\n\n\nYou can check your Python version at the command line by running\n\npython --version\n.\n\n\n\n\nBasic data types\n\n\nLike most languages, Python has a number of basic types including integers,\nfloats, booleans, and strings. These data types behave in ways that are\nfamiliar from other programming languages.\n\n\nNumbers:\n Integers and floats work as you would expect from other languages:\n\n\nx\n \n=\n \n3\n\n\nprint\n(\ntype\n(\nx\n))\n \n# Prints \"<class 'int'>\"\n\n\nprint\n(\nx\n)\n       \n# Prints \"3\"\n\n\nprint\n(\nx\n \n+\n \n1\n)\n   \n# Addition; prints \"4\"\n\n\nprint\n(\nx\n \n-\n \n1\n)\n   \n# Subtraction; prints \"2\"\n\n\nprint\n(\nx\n \n*\n \n2\n)\n   \n# Multiplication; prints \"6\"\n\n\nprint\n(\nx\n \n**\n \n2\n)\n  \n# Exponentiation; prints \"9\"\n\n\nx\n \n+=\n \n1\n\n\nprint\n(\nx\n)\n  \n# Prints \"4\"\n\n\nx\n \n*=\n \n2\n\n\nprint\n(\nx\n)\n  \n# Prints \"8\"\n\n\ny\n \n=\n \n2.5\n\n\nprint\n(\ntype\n(\ny\n))\n \n# Prints \"<class 'float'>\"\n\n\nprint\n(\ny\n,\n \ny\n \n+\n \n1\n,\n \ny\n \n*\n \n2\n,\n \ny\n \n**\n \n2\n)\n \n# Prints \"2.5 3.5 5.0 6.25\"\n\n\n\n\n\n\nNote that unlike many languages, Python does not have unary increment (\nx++\n)\nor decrement (\nx--\n) operators.\n\n\nPython also has built-in types for complex numbers;\nyou can find all of the details\n\nin the documentation\n.\n\n\nBooleans:\n Python implements all of the usual operators for Boolean logic,\nbut uses English words rather than symbols (\n&&\n, \n||\n, etc.):\n\n\nt\n \n=\n \nTrue\n\n\nf\n \n=\n \nFalse\n\n\nprint\n(\ntype\n(\nt\n))\n \n# Prints \"<class 'bool'>\"\n\n\nprint\n(\nt\n \nand\n \nf\n)\n \n# Logical AND; prints \"False\"\n\n\nprint\n(\nt\n \nor\n \nf\n)\n  \n# Logical OR; prints \"True\"\n\n\nprint\n(\nnot\n \nt\n)\n   \n# Logical NOT; prints \"False\"\n\n\nprint\n(\nt\n \n!=\n \nf\n)\n  \n# Logical XOR; prints \"True\"\n\n\n\n\n\n\nStrings:\n Python has great support for strings:\n\n\nhello\n \n=\n \n'hello'\n    \n# String literals can use single quotes\n\n\nworld\n \n=\n \n\"world\"\n    \n# or double quotes; it does not matter.\n\n\nprint\n(\nhello\n)\n       \n# Prints \"hello\"\n\n\nprint\n(\nlen\n(\nhello\n))\n  \n# String length; prints \"5\"\n\n\nhw\n \n=\n \nhello\n \n+\n \n' '\n \n+\n \nworld\n  \n# String concatenation\n\n\nprint\n(\nhw\n)\n  \n# prints \"hello world\"\n\n\nhw12\n \n=\n \n'\n%s\n \n%s\n \n%d\n'\n \n%\n \n(\nhello\n,\n \nworld\n,\n \n12\n)\n  \n# sprintf style string formatting\n\n\nprint\n(\nhw12\n)\n  \n# prints \"hello world 12\"\n\n\n\n\n\n\nString objects have a bunch of useful methods; for example:\n\n\ns\n \n=\n \n\"hello\"\n\n\nprint\n(\ns\n.\ncapitalize\n())\n  \n# Capitalize a string; prints \"Hello\"\n\n\nprint\n(\ns\n.\nupper\n())\n       \n# Convert a string to uppercase; prints \"HELLO\"\n\n\nprint\n(\ns\n.\nrjust\n(\n7\n))\n      \n# Right-justify a string, padding with spaces; prints \"  hello\"\n\n\nprint\n(\ns\n.\ncenter\n(\n7\n))\n     \n# Center a string, padding with spaces; prints \" hello \"\n\n\nprint\n(\ns\n.\nreplace\n(\n'l'\n,\n \n'(ell)'\n))\n  \n# Replace all instances of one substring with another;\n\n                                \n# prints \"he(ell)(ell)o\"\n\n\nprint\n(\n'  world '\n.\nstrip\n())\n  \n# Strip leading and trailing whitespace; prints \"world\"\n\n\n\n\n\n\nYou can find a list of all string methods \nin the documentation\n.\n\n\n\n\nContainers\n\n\nPython includes several built-in container types: lists, dictionaries, sets, and tuples.\n\n\n\n\nLists\n\n\nA list is the Python equivalent of an array, but is resizeable\nand can contain elements of different types:\n\n\nxs\n \n=\n \n[\n3\n,\n \n1\n,\n \n2\n]\n    \n# Create a list\n\n\nprint\n(\nxs\n,\n \nxs\n[\n2\n])\n  \n# Prints \"[3, 1, 2] 2\"\n\n\nprint\n(\nxs\n[\n-\n1\n])\n     \n# Negative indices count from the end of the list; prints \"2\"\n\n\nxs\n[\n2\n]\n \n=\n \n'foo'\n     \n# Lists can contain elements of different types\n\n\nprint\n(\nxs\n)\n         \n# Prints \"[3, 1, 'foo']\"\n\n\nxs\n.\nappend\n(\n'bar'\n)\n  \n# Add a new element to the end of the list\n\n\nprint\n(\nxs\n)\n         \n# Prints \"[3, 1, 'foo', 'bar']\"\n\n\nx\n \n=\n \nxs\n.\npop\n()\n      \n# Remove and return the last element of the list\n\n\nprint\n(\nx\n,\n \nxs\n)\n      \n# Prints \"bar [3, 1, 'foo']\"\n\n\n\n\n\n\nAs usual, you can find all the gory details about lists\n\nin the documentation\n.\n\n\nSlicing:\n\nIn addition to accessing list elements one at a time, Python provides\nconcise syntax to access sublists; this is known as \nslicing\n:\n\n\nnums\n \n=\n \nlist\n(\nrange\n(\n5\n))\n     \n# range is a built-in function that creates a list of integers\n\n\nprint\n(\nnums\n)\n               \n# Prints \"[0, 1, 2, 3, 4]\"\n\n\nprint\n(\nnums\n[\n2\n:\n4\n])\n          \n# Get a slice from index 2 to 4 (exclusive); prints \"[2, 3]\"\n\n\nprint\n(\nnums\n[\n2\n:])\n           \n# Get a slice from index 2 to the end; prints \"[2, 3, 4]\"\n\n\nprint\n(\nnums\n[:\n2\n])\n           \n# Get a slice from the start to index 2 (exclusive); prints \"[0, 1]\"\n\n\nprint\n(\nnums\n[:])\n            \n# Get a slice of the whole list; prints \"[0, 1, 2, 3, 4]\"\n\n\nprint\n(\nnums\n[:\n-\n1\n])\n          \n# Slice indices can be negative; prints \"[0, 1, 2, 3]\"\n\n\nnums\n[\n2\n:\n4\n]\n \n=\n \n[\n8\n,\n \n9\n]\n        \n# Assign a new sublist to a slice\n\n\nprint\n(\nnums\n)\n               \n# Prints \"[0, 1, 8, 9, 4]\"\n\n\n\n\n\n\nWe will see slicing again in the context of numpy arrays.\n\n\nLoops:\n You can loop over the elements of a list like this:\n\n\nanimals\n \n=\n \n[\n'cat'\n,\n \n'dog'\n,\n \n'monkey'\n]\n\n\nfor\n \nanimal\n \nin\n \nanimals\n:\n\n    \nprint\n(\nanimal\n)\n\n\n# Prints \"cat\", \"dog\", \"monkey\", each on its own line.\n\n\n\n\n\n\nIf you want access to the index of each element within the body of a loop,\nuse the built-in \nenumerate\n function:\n\n\nanimals\n \n=\n \n[\n'cat'\n,\n \n'dog'\n,\n \n'monkey'\n]\n\n\nfor\n \nidx\n,\n \nanimal\n \nin\n \nenumerate\n(\nanimals\n):\n\n    \nprint\n(\n'#\n%d\n: \n%s\n'\n \n%\n \n(\nidx\n \n+\n \n1\n,\n \nanimal\n))\n\n\n# Prints \"#1: cat\", \"#2: dog\", \"#3: monkey\", each on its own line\n\n\n\n\n\n\nList comprehensions:\n\nWhen programming, frequently we want to transform one type of data into another.\nAs a simple example, consider the following code that computes square numbers:\n\n\nnums\n \n=\n \n[\n0\n,\n \n1\n,\n \n2\n,\n \n3\n,\n \n4\n]\n\n\nsquares\n \n=\n \n[]\n\n\nfor\n \nx\n \nin\n \nnums\n:\n\n    \nsquares\n.\nappend\n(\nx\n \n**\n \n2\n)\n\n\nprint\n(\nsquares\n)\n   \n# Prints [0, 1, 4, 9, 16]\n\n\n\n\n\n\nYou can make this code simpler using a \nlist comprehension\n:\n\n\nnums\n \n=\n \n[\n0\n,\n \n1\n,\n \n2\n,\n \n3\n,\n \n4\n]\n\n\nsquares\n \n=\n \n[\nx\n \n**\n \n2\n \nfor\n \nx\n \nin\n \nnums\n]\n\n\nprint\n(\nsquares\n)\n   \n# Prints [0, 1, 4, 9, 16]\n\n\n\n\n\n\nList comprehensions can also contain conditions:\n\n\nnums\n \n=\n \n[\n0\n,\n \n1\n,\n \n2\n,\n \n3\n,\n \n4\n]\n\n\neven_squares\n \n=\n \n[\nx\n \n**\n \n2\n \nfor\n \nx\n \nin\n \nnums\n \nif\n \nx\n \n%\n \n2\n \n==\n \n0\n]\n\n\nprint\n(\neven_squares\n)\n  \n# Prints \"[0, 4, 16]\"\n\n\n\n\n\n\n\n\nDictionaries\n\n\nA dictionary stores (key, value) pairs, similar to a \nMap\n in Java or\nan object in Javascript. You can use it like this:\n\n\nd\n \n=\n \n{\n'cat'\n:\n \n'cute'\n,\n \n'dog'\n:\n \n'furry'\n}\n  \n# Create a new dictionary with some data\n\n\nprint\n(\nd\n[\n'cat'\n])\n       \n# Get an entry from a dictionary; prints \"cute\"\n\n\nprint\n(\n'cat'\n \nin\n \nd\n)\n     \n# Check if a dictionary has a given key; prints \"True\"\n\n\nd\n[\n'fish'\n]\n \n=\n \n'wet'\n     \n# Set an entry in a dictionary\n\n\nprint\n(\nd\n[\n'fish'\n])\n      \n# Prints \"wet\"\n\n\n# print(d['monkey'])  # KeyError: 'monkey' not a key of d\n\n\nprint\n(\nd\n.\nget\n(\n'monkey'\n,\n \n'N/A'\n))\n  \n# Get an element with a default; prints \"N/A\"\n\n\nprint\n(\nd\n.\nget\n(\n'fish'\n,\n \n'N/A'\n))\n    \n# Get an element with a default; prints \"wet\"\n\n\ndel\n \nd\n[\n'fish'\n]\n         \n# Remove an element from a dictionary\n\n\nprint\n(\nd\n.\nget\n(\n'fish'\n,\n \n'N/A'\n))\n \n# \"fish\" is no longer a key; prints \"N/A\"\n\n\n\n\n\n\nYou can find all you need to know about dictionaries\n\nin the documentation\n.\n\n\nLoops:\n It is easy to iterate over the keys in a dictionary:\n\n\nd\n \n=\n \n{\n'person'\n:\n \n2\n,\n \n'cat'\n:\n \n4\n,\n \n'spider'\n:\n \n8\n}\n\n\nfor\n \nanimal\n \nin\n \nd\n:\n\n    \nlegs\n \n=\n \nd\n[\nanimal\n]\n\n    \nprint\n(\n'A \n%s\n has \n%d\n legs'\n \n%\n \n(\nanimal\n,\n \nlegs\n))\n\n\n# Prints \"A person has 2 legs\", \"A cat has 4 legs\", \"A spider has 8 legs\"\n\n\n\n\n\n\nIf you want access to keys and their corresponding values, use the \nitems\n method:\n\n\nd\n \n=\n \n{\n'person'\n:\n \n2\n,\n \n'cat'\n:\n \n4\n,\n \n'spider'\n:\n \n8\n}\n\n\nfor\n \nanimal\n,\n \nlegs\n \nin\n \nd\n.\nitems\n():\n\n    \nprint\n(\n'A \n%s\n has \n%d\n legs'\n \n%\n \n(\nanimal\n,\n \nlegs\n))\n\n\n# Prints \"A person has 2 legs\", \"A cat has 4 legs\", \"A spider has 8 legs\"\n\n\n\n\n\n\nDictionary comprehensions:\n\nThese are similar to list comprehensions, but allow you to easily construct\ndictionaries. For example:\n\n\nnums\n \n=\n \n[\n0\n,\n \n1\n,\n \n2\n,\n \n3\n,\n \n4\n]\n\n\neven_num_to_square\n \n=\n \n{\nx\n:\n \nx\n \n**\n \n2\n \nfor\n \nx\n \nin\n \nnums\n \nif\n \nx\n \n%\n \n2\n \n==\n \n0\n}\n\n\nprint\n(\neven_num_to_square\n)\n  \n# Prints \"{0: 0, 2: 4, 4: 16}\"\n\n\n\n\n\n\n\n\nSets\n\n\nA set is an unordered collection of distinct elements. As a simple example, consider\nthe following:\n\n\nanimals\n \n=\n \n{\n'cat'\n,\n \n'dog'\n}\n\n\nprint\n(\n'cat'\n \nin\n \nanimals\n)\n   \n# Check if an element is in a set; prints \"True\"\n\n\nprint\n(\n'fish'\n \nin\n \nanimals\n)\n  \n# prints \"False\"\n\n\nanimals\n.\nadd\n(\n'fish'\n)\n       \n# Add an element to a set\n\n\nprint\n(\n'fish'\n \nin\n \nanimals\n)\n  \n# Prints \"True\"\n\n\nprint\n(\nlen\n(\nanimals\n))\n       \n# Number of elements in a set; prints \"3\"\n\n\nanimals\n.\nadd\n(\n'cat'\n)\n        \n# Adding an element that is already in the set does nothing\n\n\nprint\n(\nlen\n(\nanimals\n))\n       \n# Prints \"3\"\n\n\nanimals\n.\nremove\n(\n'cat'\n)\n     \n# Remove an element from a set\n\n\nprint\n(\nlen\n(\nanimals\n))\n       \n# Prints \"2\"\n\n\n\n\n\n\nAs usual, everything you want to know about sets can be found\n\nin the documentation\n.\n\n\nLoops:\n\nIterating over a set has the same syntax as iterating over a list;\nhowever since sets are unordered, you cannot make assumptions about the order\nin which you visit the elements of the set:\n\n\nanimals\n \n=\n \n{\n'cat'\n,\n \n'dog'\n,\n \n'fish'\n}\n\n\nfor\n \nidx\n,\n \nanimal\n \nin\n \nenumerate\n(\nanimals\n):\n\n    \nprint\n(\n'#\n%d\n: \n%s\n'\n \n%\n \n(\nidx\n \n+\n \n1\n,\n \nanimal\n))\n\n\n# Prints \"#1: fish\", \"#2: dog\", \"#3: cat\"\n\n\n\n\n\n\nSet comprehensions:\n\nLike lists and dictionaries, we can easily construct sets using set comprehensions:\n\n\nfrom\n \nmath\n \nimport\n \nsqrt\n\n\nnums\n \n=\n \n{\nint\n(\nsqrt\n(\nx\n))\n \nfor\n \nx\n \nin\n \nrange\n(\n30\n)}\n\n\nprint\n(\nnums\n)\n  \n# Prints \"{0, 1, 2, 3, 4, 5}\"\n\n\n\n\n\n\n\n\nTuples\n\n\nA tuple is an (immutable) ordered list of values.\nA tuple is in many ways similar to a list; one of the most important differences is that\ntuples can be used as keys in dictionaries and as elements of sets, while lists cannot.\nHere is a trivial example:\n\n\nd\n \n=\n \n{(\nx\n,\n \nx\n \n+\n \n1\n):\n \nx\n \nfor\n \nx\n \nin\n \nrange\n(\n10\n)}\n  \n# Create a dictionary with tuple keys\n\n\nt\n \n=\n \n(\n5\n,\n \n6\n)\n        \n# Create a tuple\n\n\nprint\n(\ntype\n(\nt\n))\n    \n# Prints \"<class 'tuple'>\"\n\n\nprint\n(\nd\n[\nt\n])\n       \n# Prints \"5\"\n\n\nprint\n(\nd\n[(\n1\n,\n \n2\n)])\n  \n# Prints \"1\"\n\n\n\n\n\n\nThe documentation\n has more information about tuples.\n\n\n\n\nFunctions\n\n\nPython functions are defined using the \ndef\n keyword. For example:\n\n\ndef\n \nsign\n(\nx\n):\n\n    \nif\n \nx\n \n>\n \n0\n:\n\n        \nreturn\n \n'positive'\n\n    \nelif\n \nx\n \n<\n \n0\n:\n\n        \nreturn\n \n'negative'\n\n    \nelse\n:\n\n        \nreturn\n \n'zero'\n\n\n\nfor\n \nx\n \nin\n \n[\n-\n1\n,\n \n0\n,\n \n1\n]:\n\n    \nprint\n(\nsign\n(\nx\n))\n\n\n# Prints \"negative\", \"zero\", \"positive\"\n\n\n\n\n\n\nWe will often define functions to take optional keyword arguments, like this:\n\n\ndef\n \nhello\n(\nname\n,\n \nloud\n=\nFalse\n):\n\n    \nif\n \nloud\n:\n\n        \nprint\n(\n'HELLO, \n%s\n!'\n \n%\n \nname\n.\nupper\n())\n\n    \nelse\n:\n\n        \nprint\n(\n'Hello, \n%s\n'\n \n%\n \nname\n)\n\n\n\nhello\n(\n'Bob'\n)\n \n# Prints \"Hello, Bob\"\n\n\nhello\n(\n'Fred'\n,\n \nloud\n=\nTrue\n)\n  \n# Prints \"HELLO, FRED!\"\n\n\n\n\n\n\nThere is a lot more information about Python functions\n\nin the documentation\n.\n\n\n\n\nClasses\n\n\nThe syntax for defining classes in Python is straightforward:\n\n\nclass\n \nGreeter\n(\nobject\n):\n\n\n    \n# Constructor\n\n    \ndef\n \n__init__\n(\nself\n,\n \nname\n):\n\n        \nself\n.\nname\n \n=\n \nname\n  \n# Create an instance variable\n\n\n    \n# Instance method\n\n    \ndef\n \ngreet\n(\nself\n,\n \nloud\n=\nFalse\n):\n\n        \nif\n \nloud\n:\n\n            \nprint\n(\n'HELLO, \n%s\n!'\n \n%\n \nself\n.\nname\n.\nupper\n())\n\n        \nelse\n:\n\n            \nprint\n(\n'Hello, \n%s\n'\n \n%\n \nself\n.\nname\n)\n\n\n\ng\n \n=\n \nGreeter\n(\n'Fred'\n)\n  \n# Construct an instance of the Greeter class\n\n\ng\n.\ngreet\n()\n            \n# Call an instance method; prints \"Hello, Fred\"\n\n\ng\n.\ngreet\n(\nloud\n=\nTrue\n)\n   \n# Call an instance method; prints \"HELLO, FRED!\"\n\n\n\n\n\n\nYou can read a lot more about Python classes\n\nin the documentation\n.\n\n\n\n\nNumpy\n\n\nNumpy\n is the core library for scientific computing in Python.\nIt provides a high-performance multidimensional array object, and tools for working with these\narrays. If you are already familiar with MATLAB, you might find\n\nthis tutorial useful\n to get started with Numpy.\n\n\n\n\nArrays\n\n\nA numpy array is a grid of values, all of the same type, and is indexed by a tuple of\nnonnegative integers. The number of dimensions is the \nrank\n of the array; the \nshape\n\nof an array is a tuple of integers giving the size of the array along each dimension.\n\n\nWe can initialize numpy arrays from nested Python lists,\nand access elements using square brackets:\n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\n\na\n \n=\n \nnp\n.\narray\n([\n1\n,\n \n2\n,\n \n3\n])\n   \n# Create a rank 1 array\n\n\nprint\n(\ntype\n(\na\n))\n            \n# Prints \"<class 'numpy.ndarray'>\"\n\n\nprint\n(\na\n.\nshape\n)\n            \n# Prints \"(3,)\"\n\n\nprint\n(\na\n[\n0\n],\n \na\n[\n1\n],\n \na\n[\n2\n])\n   \n# Prints \"1 2 3\"\n\n\na\n[\n0\n]\n \n=\n \n5\n                  \n# Change an element of the array\n\n\nprint\n(\na\n)\n                  \n# Prints \"[5, 2, 3]\"\n\n\n\nb\n \n=\n \nnp\n.\narray\n([[\n1\n,\n2\n,\n3\n],[\n4\n,\n5\n,\n6\n]])\n    \n# Create a rank 2 array\n\n\nprint\n(\nb\n.\nshape\n)\n                     \n# Prints \"(2, 3)\"\n\n\nprint\n(\nb\n[\n0\n,\n \n0\n],\n \nb\n[\n0\n,\n \n1\n],\n \nb\n[\n1\n,\n \n0\n])\n   \n# Prints \"1 2 4\"\n\n\n\n\n\n\nNumpy also provides many functions to create arrays:\n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\n\na\n \n=\n \nnp\n.\nzeros\n((\n2\n,\n2\n))\n   \n# Create an array of all zeros\n\n\nprint\n(\na\n)\n              \n# Prints \"[[ 0.  0.]\n\n                      \n#          [ 0.  0.]]\"\n\n\n\nb\n \n=\n \nnp\n.\nones\n((\n1\n,\n2\n))\n    \n# Create an array of all ones\n\n\nprint\n(\nb\n)\n              \n# Prints \"[[ 1.  1.]]\"\n\n\n\nc\n \n=\n \nnp\n.\nfull\n((\n2\n,\n2\n),\n \n7\n)\n  \n# Create a constant array\n\n\nprint\n(\nc\n)\n               \n# Prints \"[[ 7.  7.]\n\n                       \n#          [ 7.  7.]]\"\n\n\n\nd\n \n=\n \nnp\n.\neye\n(\n2\n)\n         \n# Create a 2x2 identity matrix\n\n\nprint\n(\nd\n)\n              \n# Prints \"[[ 1.  0.]\n\n                      \n#          [ 0.  1.]]\"\n\n\n\ne\n \n=\n \nnp\n.\nrandom\n.\nrandom\n((\n2\n,\n2\n))\n  \n# Create an array filled with random values\n\n\nprint\n(\ne\n)\n                     \n# Might print \"[[ 0.91940167  0.08143941]\n\n                             \n#               [ 0.68744134  0.87236687]]\"\n\n\n\n\n\n\nYou can read about other methods of array creation\n\nin the documentation\n.\n\n\n\n\nArray indexing\n\n\nNumpy offers several ways to index into arrays.\n\n\nSlicing:\n\nSimilar to Python lists, numpy arrays can be sliced.\nSince arrays may be multidimensional, you must specify a slice for each dimension\nof the array:\n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\n\n# Create the following rank 2 array with shape (3, 4)\n\n\n# [[ 1  2  3  4]\n\n\n#  [ 5  6  7  8]\n\n\n#  [ 9 10 11 12]]\n\n\na\n \n=\n \nnp\n.\narray\n([[\n1\n,\n2\n,\n3\n,\n4\n],\n \n[\n5\n,\n6\n,\n7\n,\n8\n],\n \n[\n9\n,\n10\n,\n11\n,\n12\n]])\n\n\n\n# Use slicing to pull out the subarray consisting of the first 2 rows\n\n\n# and columns 1 and 2; b is the following array of shape (2, 2):\n\n\n# [[2 3]\n\n\n#  [6 7]]\n\n\nb\n \n=\n \na\n[:\n2\n,\n \n1\n:\n3\n]\n\n\n\n# A slice of an array is a view into the same data, so modifying it\n\n\n# will modify the original array.\n\n\nprint\n(\na\n[\n0\n,\n \n1\n])\n   \n# Prints \"2\"\n\n\nb\n[\n0\n,\n \n0\n]\n \n=\n \n77\n     \n# b[0, 0] is the same piece of data as a[0, 1]\n\n\nprint\n(\na\n[\n0\n,\n \n1\n])\n   \n# Prints \"77\"\n\n\n\n\n\n\nYou can also mix integer indexing with slice indexing.\nHowever, doing so will yield an array of lower rank than the original array.\nNote that this is quite different from the way that MATLAB handles array\nslicing:\n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\n\n# Create the following rank 2 array with shape (3, 4)\n\n\n# [[ 1  2  3  4]\n\n\n#  [ 5  6  7  8]\n\n\n#  [ 9 10 11 12]]\n\n\na\n \n=\n \nnp\n.\narray\n([[\n1\n,\n2\n,\n3\n,\n4\n],\n \n[\n5\n,\n6\n,\n7\n,\n8\n],\n \n[\n9\n,\n10\n,\n11\n,\n12\n]])\n\n\n\n# Two ways of accessing the data in the middle row of the array.\n\n\n# Mixing integer indexing with slices yields an array of lower rank,\n\n\n# while using only slices yields an array of the same rank as the\n\n\n# original array:\n\n\nrow_r1\n \n=\n \na\n[\n1\n,\n \n:]\n    \n# Rank 1 view of the second row of a\n\n\nrow_r2\n \n=\n \na\n[\n1\n:\n2\n,\n \n:]\n  \n# Rank 2 view of the second row of a\n\n\nprint\n(\nrow_r1\n,\n \nrow_r1\n.\nshape\n)\n  \n# Prints \"[5 6 7 8] (4,)\"\n\n\nprint\n(\nrow_r2\n,\n \nrow_r2\n.\nshape\n)\n  \n# Prints \"[[5 6 7 8]] (1, 4)\"\n\n\n\n# We can make the same distinction when accessing columns of an array:\n\n\ncol_r1\n \n=\n \na\n[:,\n \n1\n]\n\n\ncol_r2\n \n=\n \na\n[:,\n \n1\n:\n2\n]\n\n\nprint\n(\ncol_r1\n,\n \ncol_r1\n.\nshape\n)\n  \n# Prints \"[ 2  6 10] (3,)\"\n\n\nprint\n(\ncol_r2\n,\n \ncol_r2\n.\nshape\n)\n  \n# Prints \"[[ 2]\n\n                             \n#          [ 6]\n\n                             \n#          [10]] (3, 1)\"\n\n\n\n\n\n\nInteger array indexing:\n\nWhen you index into numpy arrays using slicing, the resulting array view\nwill always be a subarray of the original array. In contrast, integer array\nindexing allows you to construct arbitrary arrays using the data from another\narray. Here is an example:\n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\n\na\n \n=\n \nnp\n.\narray\n([[\n1\n,\n2\n],\n \n[\n3\n,\n \n4\n],\n \n[\n5\n,\n \n6\n]])\n\n\n\n# An example of integer array indexing.\n\n\n# The returned array will have shape (3,) and\n\n\nprint\n(\na\n[[\n0\n,\n \n1\n,\n \n2\n],\n \n[\n0\n,\n \n1\n,\n \n0\n]])\n  \n# Prints \"[1 4 5]\"\n\n\n\n# The above example of integer array indexing is equivalent to this:\n\n\nprint\n(\nnp\n.\narray\n([\na\n[\n0\n,\n \n0\n],\n \na\n[\n1\n,\n \n1\n],\n \na\n[\n2\n,\n \n0\n]]))\n  \n# Prints \"[1 4 5]\"\n\n\n\n# When using integer array indexing, you can reuse the same\n\n\n# element from the source array:\n\n\nprint\n(\na\n[[\n0\n,\n \n0\n],\n \n[\n1\n,\n \n1\n]])\n  \n# Prints \"[2 2]\"\n\n\n\n# Equivalent to the previous integer array indexing example\n\n\nprint\n(\nnp\n.\narray\n([\na\n[\n0\n,\n \n1\n],\n \na\n[\n0\n,\n \n1\n]]))\n  \n# Prints \"[2 2]\"\n\n\n\n\n\n\nOne useful trick with integer array indexing is selecting or mutating one\nelement from each row of a matrix:\n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\n\n# Create a new array from which we will select elements\n\n\na\n \n=\n \nnp\n.\narray\n([[\n1\n,\n2\n,\n3\n],\n \n[\n4\n,\n5\n,\n6\n],\n \n[\n7\n,\n8\n,\n9\n],\n \n[\n10\n,\n \n11\n,\n \n12\n]])\n\n\n\nprint\n(\na\n)\n  \n# prints \"array([[ 1,  2,  3],\n\n          \n#                [ 4,  5,  6],\n\n          \n#                [ 7,  8,  9],\n\n          \n#                [10, 11, 12]])\"\n\n\n\n# Create an array of indices\n\n\nb\n \n=\n \nnp\n.\narray\n([\n0\n,\n \n2\n,\n \n0\n,\n \n1\n])\n\n\n\n# Select one element from each row of a using the indices in b\n\n\nprint\n(\na\n[\nnp\n.\narange\n(\n4\n),\n \nb\n])\n  \n# Prints \"[ 1  6  7 11]\"\n\n\n\n# Mutate one element from each row of a using the indices in b\n\n\na\n[\nnp\n.\narange\n(\n4\n),\n \nb\n]\n \n+=\n \n10\n\n\n\nprint\n(\na\n)\n  \n# prints \"array([[11,  2,  3],\n\n          \n#                [ 4,  5, 16],\n\n          \n#                [17,  8,  9],\n\n          \n#                [10, 21, 12]])\n\n\n\n\n\n\nBoolean array indexing:\n\nBoolean array indexing lets you pick out arbitrary elements of an array.\nFrequently this type of indexing is used to select the elements of an array\nthat satisfy some condition. Here is an example:\n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\n\na\n \n=\n \nnp\n.\narray\n([[\n1\n,\n2\n],\n \n[\n3\n,\n \n4\n],\n \n[\n5\n,\n \n6\n]])\n\n\n\nbool_idx\n \n=\n \n(\na\n \n>\n \n2\n)\n   \n# Find the elements of a that are bigger than 2;\n\n                     \n# this returns a numpy array of Booleans of the same\n\n                     \n# shape as a, where each slot of bool_idx tells\n\n                     \n# whether that element of a is > 2.\n\n\n\nprint\n(\nbool_idx\n)\n      \n# Prints \"[[False False]\n\n                     \n#          [ True  True]\n\n                     \n#          [ True  True]]\"\n\n\n\n# We use boolean array indexing to construct a rank 1 array\n\n\n# consisting of the elements of a corresponding to the True values\n\n\n# of bool_idx\n\n\nprint\n(\na\n[\nbool_idx\n])\n  \n# Prints \"[3 4 5 6]\"\n\n\n\n# We can do all of the above in a single concise statement:\n\n\nprint\n(\na\n[\na\n \n>\n \n2\n])\n     \n# Prints \"[3 4 5 6]\"\n\n\n\n\n\n\nFor brevity we have left out a lot of details about numpy array indexing;\nif you want to know more you should\n\nread the documentation\n.\n\n\n\n\nDatatypes\n\n\nEvery numpy array is a grid of elements of the same type.\nNumpy provides a large set of numeric datatypes that you can use to construct arrays.\nNumpy tries to guess a datatype when you create an array, but functions that construct\narrays usually also include an optional argument to explicitly specify the datatype.\nHere is an example:\n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\n\nx\n \n=\n \nnp\n.\narray\n([\n1\n,\n \n2\n])\n   \n# Let numpy choose the datatype\n\n\nprint\n(\nx\n.\ndtype\n)\n         \n# Prints \"int64\"\n\n\n\nx\n \n=\n \nnp\n.\narray\n([\n1.0\n,\n \n2.0\n])\n   \n# Let numpy choose the datatype\n\n\nprint\n(\nx\n.\ndtype\n)\n             \n# Prints \"float64\"\n\n\n\nx\n \n=\n \nnp\n.\narray\n([\n1\n,\n \n2\n],\n \ndtype\n=\nnp\n.\nint64\n)\n   \n# Force a particular datatype\n\n\nprint\n(\nx\n.\ndtype\n)\n                         \n# Prints \"int64\"\n\n\n\n\n\n\nYou can read all about numpy datatypes\n\nin the documentation\n.\n\n\n\n\nArray math\n\n\nBasic mathematical functions operate elementwise on arrays, and are available\nboth as operator overloads and as functions in the numpy module:\n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\n\nx\n \n=\n \nnp\n.\narray\n([[\n1\n,\n2\n],[\n3\n,\n4\n]],\n \ndtype\n=\nnp\n.\nfloat64\n)\n\n\ny\n \n=\n \nnp\n.\narray\n([[\n5\n,\n6\n],[\n7\n,\n8\n]],\n \ndtype\n=\nnp\n.\nfloat64\n)\n\n\n\n# Elementwise sum; both produce the array\n\n\n# [[ 6.0  8.0]\n\n\n#  [10.0 12.0]]\n\n\nprint\n(\nx\n \n+\n \ny\n)\n\n\nprint\n(\nnp\n.\nadd\n(\nx\n,\n \ny\n))\n\n\n\n# Elementwise difference; both produce the array\n\n\n# [[-4.0 -4.0]\n\n\n#  [-4.0 -4.0]]\n\n\nprint\n(\nx\n \n-\n \ny\n)\n\n\nprint\n(\nnp\n.\nsubtract\n(\nx\n,\n \ny\n))\n\n\n\n# Elementwise product; both produce the array\n\n\n# [[ 5.0 12.0]\n\n\n#  [21.0 32.0]]\n\n\nprint\n(\nx\n \n*\n \ny\n)\n\n\nprint\n(\nnp\n.\nmultiply\n(\nx\n,\n \ny\n))\n\n\n\n# Elementwise division; both produce the array\n\n\n# [[ 0.2         0.33333333]\n\n\n#  [ 0.42857143  0.5       ]]\n\n\nprint\n(\nx\n \n/\n \ny\n)\n\n\nprint\n(\nnp\n.\ndivide\n(\nx\n,\n \ny\n))\n\n\n\n# Elementwise square root; produces the array\n\n\n# [[ 1.          1.41421356]\n\n\n#  [ 1.73205081  2.        ]]\n\n\nprint\n(\nnp\n.\nsqrt\n(\nx\n))\n\n\n\n\n\n\nNote that unlike MATLAB, \n*\n is elementwise multiplication, not matrix\nmultiplication. We instead use the \ndot\n function to compute inner\nproducts of vectors, to multiply a vector by a matrix, and to\nmultiply matrices. \ndot\n is available both as a function in the numpy\nmodule and as an instance method of array objects:\n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\n\nx\n \n=\n \nnp\n.\narray\n([[\n1\n,\n2\n],[\n3\n,\n4\n]])\n\n\ny\n \n=\n \nnp\n.\narray\n([[\n5\n,\n6\n],[\n7\n,\n8\n]])\n\n\n\nv\n \n=\n \nnp\n.\narray\n([\n9\n,\n10\n])\n\n\nw\n \n=\n \nnp\n.\narray\n([\n11\n,\n \n12\n])\n\n\n\n# Inner product of vectors; both produce 219\n\n\nprint\n(\nv\n.\ndot\n(\nw\n))\n\n\nprint\n(\nnp\n.\ndot\n(\nv\n,\n \nw\n))\n\n\n\n# Matrix / vector product; both produce the rank 1 array [29 67]\n\n\nprint\n(\nx\n.\ndot\n(\nv\n))\n\n\nprint\n(\nnp\n.\ndot\n(\nx\n,\n \nv\n))\n\n\n\n# Matrix / matrix product; both produce the rank 2 array\n\n\n# [[19 22]\n\n\n#  [43 50]]\n\n\nprint\n(\nx\n.\ndot\n(\ny\n))\n\n\nprint\n(\nnp\n.\ndot\n(\nx\n,\n \ny\n))\n\n\n\n\n\n\nNumpy provides many useful functions for performing computations on\narrays; one of the most useful is \nsum\n:\n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\n\nx\n \n=\n \nnp\n.\narray\n([[\n1\n,\n2\n],[\n3\n,\n4\n]])\n\n\n\nprint\n(\nnp\n.\nsum\n(\nx\n))\n  \n# Compute sum of all elements; prints \"10\"\n\n\nprint\n(\nnp\n.\nsum\n(\nx\n,\n \naxis\n=\n0\n))\n  \n# Compute sum of each column; prints \"[4 6]\"\n\n\nprint\n(\nnp\n.\nsum\n(\nx\n,\n \naxis\n=\n1\n))\n  \n# Compute sum of each row; prints \"[3 7]\"\n\n\n\n\n\n\nYou can find the full list of mathematical functions provided by numpy\n\nin the documentation\n.\n\n\nApart from computing mathematical functions using arrays, we frequently\nneed to reshape or otherwise manipulate data in arrays. The simplest example\nof this type of operation is transposing a matrix; to transpose a matrix,\nsimply use the \nT\n attribute of an array object:\n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\n\nx\n \n=\n \nnp\n.\narray\n([[\n1\n,\n2\n],\n \n[\n3\n,\n4\n]])\n\n\nprint\n(\nx\n)\n    \n# Prints \"[[1 2]\n\n            \n#          [3 4]]\"\n\n\nprint\n(\nx\n.\nT\n)\n  \n# Prints \"[[1 3]\n\n            \n#          [2 4]]\"\n\n\n\n# Note that taking the transpose of a rank 1 array does nothing:\n\n\nv\n \n=\n \nnp\n.\narray\n([\n1\n,\n2\n,\n3\n])\n\n\nprint\n(\nv\n)\n    \n# Prints \"[1 2 3]\"\n\n\nprint\n(\nv\n.\nT\n)\n  \n# Prints \"[1 2 3]\"\n\n\n\n\n\n\nNumpy provides many more functions for manipulating arrays; you can see the full list\n\nin the documentation\n.\n\n\n\n\nBroadcasting\n\n\nBroadcasting is a powerful mechanism that allows numpy to work with arrays of different\nshapes when performing arithmetic operations. Frequently we have a smaller array and a\nlarger array, and we want to use the smaller array multiple times to perform some operation\non the larger array.\n\n\nFor example, suppose that we want to add a constant vector to each\nrow of a matrix. We could do it like this:\n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\n\n# We will add the vector v to each row of the matrix x,\n\n\n# storing the result in the matrix y\n\n\nx\n \n=\n \nnp\n.\narray\n([[\n1\n,\n2\n,\n3\n],\n \n[\n4\n,\n5\n,\n6\n],\n \n[\n7\n,\n8\n,\n9\n],\n \n[\n10\n,\n \n11\n,\n \n12\n]])\n\n\nv\n \n=\n \nnp\n.\narray\n([\n1\n,\n \n0\n,\n \n1\n])\n\n\ny\n \n=\n \nnp\n.\nempty_like\n(\nx\n)\n   \n# Create an empty matrix with the same shape as x\n\n\n\n# Add the vector v to each row of the matrix x with an explicit loop\n\n\nfor\n \ni\n \nin\n \nrange\n(\n4\n):\n\n    \ny\n[\ni\n,\n \n:]\n \n=\n \nx\n[\ni\n,\n \n:]\n \n+\n \nv\n\n\n\n# Now y is the following\n\n\n# [[ 2  2  4]\n\n\n#  [ 5  5  7]\n\n\n#  [ 8  8 10]\n\n\n#  [11 11 13]]\n\n\nprint\n(\ny\n)\n\n\n\n\n\n\nThis works; however when the matrix \nx\n is very large, computing an explicit loop\nin Python could be slow. Note that adding the vector \nv\n to each row of the matrix\n\nx\n is equivalent to forming a matrix \nvv\n by stacking multiple copies of \nv\n vertically,\nthen performing elementwise summation of \nx\n and \nvv\n. We could implement this\napproach like this:\n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\n\n# We will add the vector v to each row of the matrix x,\n\n\n# storing the result in the matrix y\n\n\nx\n \n=\n \nnp\n.\narray\n([[\n1\n,\n2\n,\n3\n],\n \n[\n4\n,\n5\n,\n6\n],\n \n[\n7\n,\n8\n,\n9\n],\n \n[\n10\n,\n \n11\n,\n \n12\n]])\n\n\nv\n \n=\n \nnp\n.\narray\n([\n1\n,\n \n0\n,\n \n1\n])\n\n\nvv\n \n=\n \nnp\n.\ntile\n(\nv\n,\n \n(\n4\n,\n \n1\n))\n   \n# Stack 4 copies of v on top of each other\n\n\nprint\n(\nvv\n)\n                 \n# Prints \"[[1 0 1]\n\n                          \n#          [1 0 1]\n\n                          \n#          [1 0 1]\n\n                          \n#          [1 0 1]]\"\n\n\ny\n \n=\n \nx\n \n+\n \nvv\n  \n# Add x and vv elementwise\n\n\nprint\n(\ny\n)\n  \n# Prints \"[[ 2  2  4\n\n          \n#          [ 5  5  7]\n\n          \n#          [ 8  8 10]\n\n          \n#          [11 11 13]]\"\n\n\n\n\n\n\nNumpy broadcasting allows us to perform this computation without actually\ncreating multiple copies of \nv\n. Consider this version, using broadcasting:\n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\n\n# We will add the vector v to each row of the matrix x,\n\n\n# storing the result in the matrix y\n\n\nx\n \n=\n \nnp\n.\narray\n([[\n1\n,\n2\n,\n3\n],\n \n[\n4\n,\n5\n,\n6\n],\n \n[\n7\n,\n8\n,\n9\n],\n \n[\n10\n,\n \n11\n,\n \n12\n]])\n\n\nv\n \n=\n \nnp\n.\narray\n([\n1\n,\n \n0\n,\n \n1\n])\n\n\ny\n \n=\n \nx\n \n+\n \nv\n  \n# Add v to each row of x using broadcasting\n\n\nprint\n(\ny\n)\n  \n# Prints \"[[ 2  2  4]\n\n          \n#          [ 5  5  7]\n\n          \n#          [ 8  8 10]\n\n          \n#          [11 11 13]]\"\n\n\n\n\n\n\nThe line \ny = x + v\n works even though \nx\n has shape \n(4, 3)\n and \nv\n has shape\n\n(3,)\n due to broadcasting; this line works as if \nv\n actually had shape \n(4, 3)\n,\nwhere each row was a copy of \nv\n, and the sum was performed elementwise.\n\n\nBroadcasting two arrays together follows these rules:\n\n\n\n\nIf the arrays do not have the same rank, prepend the shape of the lower rank array\n   with 1s until both shapes have the same length.\n\n\nThe two arrays are said to be \ncompatible\n in a dimension if they have the same\n   size in the dimension, or if one of the arrays has size 1 in that dimension.\n\n\nThe arrays can be broadcast together if they are compatible in all dimensions.\n\n\nAfter broadcasting, each array behaves as if it had shape equal to the elementwise\n   maximum of shapes of the two input arrays.\n\n\nIn any dimension where one array had size 1 and the other array had size greater than 1,\n   the first array behaves as if it were copied along that dimension\n\n\n\n\nIf this explanation does not make sense, try reading the explanation\n\nfrom the documentation\n\nor \nthis explanation\n.\n\n\nFunctions that support broadcasting are known as \nuniversal functions\n. You can find\nthe list of all universal functions\n\nin the documentation\n.\n\n\nHere are some applications of broadcasting:\n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\n\n# Compute outer product of vectors\n\n\nv\n \n=\n \nnp\n.\narray\n([\n1\n,\n2\n,\n3\n])\n  \n# v has shape (3,)\n\n\nw\n \n=\n \nnp\n.\narray\n([\n4\n,\n5\n])\n    \n# w has shape (2,)\n\n\n# To compute an outer product, we first reshape v to be a column\n\n\n# vector of shape (3, 1); we can then broadcast it against w to yield\n\n\n# an output of shape (3, 2), which is the outer product of v and w:\n\n\n# [[ 4  5]\n\n\n#  [ 8 10]\n\n\n#  [12 15]]\n\n\nprint\n(\nnp\n.\nreshape\n(\nv\n,\n \n(\n3\n,\n \n1\n))\n \n*\n \nw\n)\n\n\n\n# Add a vector to each row of a matrix\n\n\nx\n \n=\n \nnp\n.\narray\n([[\n1\n,\n2\n,\n3\n],\n \n[\n4\n,\n5\n,\n6\n]])\n\n\n# x has shape (2, 3) and v has shape (3,) so they broadcast to (2, 3),\n\n\n# giving the following matrix:\n\n\n# [[2 4 6]\n\n\n#  [5 7 9]]\n\n\nprint\n(\nx\n \n+\n \nv\n)\n\n\n\n# Add a vector to each column of a matrix\n\n\n# x has shape (2, 3) and w has shape (2,).\n\n\n# If we transpose x then it has shape (3, 2) and can be broadcast\n\n\n# against w to yield a result of shape (3, 2); transposing this result\n\n\n# yields the final result of shape (2, 3) which is the matrix x with\n\n\n# the vector w added to each column. Gives the following matrix:\n\n\n# [[ 5  6  7]\n\n\n#  [ 9 10 11]]\n\n\nprint\n((\nx\n.\nT\n \n+\n \nw\n)\n.\nT\n)\n\n\n# Another solution is to reshape w to be a column vector of shape (2, 1);\n\n\n# we can then broadcast it directly against x to produce the same\n\n\n# output.\n\n\nprint\n(\nx\n \n+\n \nnp\n.\nreshape\n(\nw\n,\n \n(\n2\n,\n \n1\n)))\n\n\n\n# Multiply a matrix by a constant:\n\n\n# x has shape (2, 3). Numpy treats scalars as arrays of shape ();\n\n\n# these can be broadcast together to shape (2, 3), producing the\n\n\n# following array:\n\n\n# [[ 2  4  6]\n\n\n#  [ 8 10 12]]\n\n\nprint\n(\nx\n \n*\n \n2\n)\n\n\n\n\n\n\nBroadcasting typically makes your code more concise and faster, so you\nshould strive to use it where possible.\n\n\nNumpy Documentation\n\n\nThis brief overview has touched on many of the important things that you need to\nknow about numpy, but is far from complete. Check out the\n\nnumpy reference\n\nto find out much more about numpy.\n\n\n\n\nSciPy\n\n\nNumpy provides a high-performance multidimensional array and basic tools to\ncompute with and manipulate these arrays.\n\nSciPy\n\nbuilds on this, and provides\na large number of functions that operate on numpy arrays and are useful for\ndifferent types of scientific and engineering applications.\n\n\nThe best way to get familiar with SciPy is to\n\nbrowse the documentation\n.\nWe will highlight some parts of SciPy that you might find useful for this class.\n\n\n\n\nImage operations\n\n\nSciPy provides some basic functions to work with images.\nFor example, it has functions to read images from disk into numpy arrays,\nto write numpy arrays to disk as images, and to resize images.\nHere is a simple example that showcases these functions:\n\n\nfrom\n \nscipy.misc\n \nimport\n \nimread\n,\n \nimsave\n,\n \nimresize\n\n\n\n# Read an JPEG image into a numpy array\n\n\nimg\n \n=\n \nimread\n(\n'assets/cat.jpg'\n)\n\n\nprint\n(\nimg\n.\ndtype\n,\n \nimg\n.\nshape\n)\n  \n# Prints \"uint8 (400, 248, 3)\"\n\n\n\n# We can tint the image by scaling each of the color channels\n\n\n# by a different scalar constant. The image has shape (400, 248, 3);\n\n\n# we multiply it by the array [1, 0.95, 0.9] of shape (3,);\n\n\n# numpy broadcasting means that this leaves the red channel unchanged,\n\n\n# and multiplies the green and blue channels by 0.95 and 0.9\n\n\n# respectively.\n\n\nimg_tinted\n \n=\n \nimg\n \n*\n \n[\n1\n,\n \n0.95\n,\n \n0.9\n]\n\n\n\n# Resize the tinted image to be 300 by 300 pixels.\n\n\nimg_tinted\n \n=\n \nimresize\n(\nimg_tinted\n,\n \n(\n300\n,\n \n300\n))\n\n\n\n# Write the tinted image back to disk\n\n\nimsave\n(\n'assets/cat_tinted.jpg'\n,\n \nimg_tinted\n)\n\n\n\n\n\n\n\n\n\n\n\n  Left: The original image.\n  Right: The tinted and resized image.\n\n\n\n\n\nMATLAB files\n\n\nThe functions \nscipy.io.loadmat\n and \nscipy.io.savemat\n allow you to read and\nwrite MATLAB files. You can read about them\n\nin the documentation\n.\n\n\n\n\nDistance between points\n\n\nSciPy defines some useful functions for computing distances between sets of points.\n\n\nThe function \nscipy.spatial.distance.pdist\n computes the distance between all pairs\nof points in a given set:\n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\nfrom\n \nscipy.spatial.distance\n \nimport\n \npdist\n,\n \nsquareform\n\n\n\n# Create the following array where each row is a point in 2D space:\n\n\n# [[0 1]\n\n\n#  [1 0]\n\n\n#  [2 0]]\n\n\nx\n \n=\n \nnp\n.\narray\n([[\n0\n,\n \n1\n],\n \n[\n1\n,\n \n0\n],\n \n[\n2\n,\n \n0\n]])\n\n\nprint\n(\nx\n)\n\n\n\n# Compute the Euclidean distance between all rows of x.\n\n\n# d[i, j] is the Euclidean distance between x[i, :] and x[j, :],\n\n\n# and d is the following array:\n\n\n# [[ 0.          1.41421356  2.23606798]\n\n\n#  [ 1.41421356  0.          1.        ]\n\n\n#  [ 2.23606798  1.          0.        ]]\n\n\nd\n \n=\n \nsquareform\n(\npdist\n(\nx\n,\n \n'euclidean'\n))\n\n\nprint\n(\nd\n)\n\n\n\n\n\n\nYou can read all the details about this function\n\nin the documentation\n.\n\n\nA similar function (\nscipy.spatial.distance.cdist\n) computes the distance between all pairs\nacross two sets of points; you can read about it\n\nin the documentation\n.\n\n\n\n\nMatplotlib\n\n\nMatplotlib\n is a plotting library.\nIn this section give a brief introduction to the \nmatplotlib.pyplot\n module,\nwhich provides a plotting system similar to that of MATLAB.\n\n\n\n\nPlotting\n\n\nThe most important function in matplotlib is \nplot\n,\nwhich allows you to plot 2D data. Here is a simple example:\n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\n\n# Compute the x and y coordinates for points on a sine curve\n\n\nx\n \n=\n \nnp\n.\narange\n(\n0\n,\n \n3\n \n*\n \nnp\n.\npi\n,\n \n0.1\n)\n\n\ny\n \n=\n \nnp\n.\nsin\n(\nx\n)\n\n\n\n# Plot the points using matplotlib\n\n\nplt\n.\nplot\n(\nx\n,\n \ny\n)\n\n\nplt\n.\nshow\n()\n  \n# You must call plt.show() to make graphics appear.\n\n\n\n\n\n\nRunning this code produces the following plot:\n\n\n\n\nWith just a little bit of extra work we can easily plot multiple lines\nat once, and add a title, legend, and axis labels:\n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\n\n# Compute the x and y coordinates for points on sine and cosine curves\n\n\nx\n \n=\n \nnp\n.\narange\n(\n0\n,\n \n3\n \n*\n \nnp\n.\npi\n,\n \n0.1\n)\n\n\ny_sin\n \n=\n \nnp\n.\nsin\n(\nx\n)\n\n\ny_cos\n \n=\n \nnp\n.\ncos\n(\nx\n)\n\n\n\n# Plot the points using matplotlib\n\n\nplt\n.\nplot\n(\nx\n,\n \ny_sin\n)\n\n\nplt\n.\nplot\n(\nx\n,\n \ny_cos\n)\n\n\nplt\n.\nxlabel\n(\n'x axis label'\n)\n\n\nplt\n.\nylabel\n(\n'y axis label'\n)\n\n\nplt\n.\ntitle\n(\n'Sine and Cosine'\n)\n\n\nplt\n.\nlegend\n([\n'Sine'\n,\n \n'Cosine'\n])\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\nYou can read much more about the \nplot\n function\n\nin the documentation\n.\n\n\n\n\nSubplots\n\n\nYou can plot different things in the same figure using the \nsubplot\n function.\nHere is an example:\n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\n\n# Compute the x and y coordinates for points on sine and cosine curves\n\n\nx\n \n=\n \nnp\n.\narange\n(\n0\n,\n \n3\n \n*\n \nnp\n.\npi\n,\n \n0.1\n)\n\n\ny_sin\n \n=\n \nnp\n.\nsin\n(\nx\n)\n\n\ny_cos\n \n=\n \nnp\n.\ncos\n(\nx\n)\n\n\n\n# Set up a subplot grid that has height 2 and width 1,\n\n\n# and set the first such subplot as active.\n\n\nplt\n.\nsubplot\n(\n2\n,\n \n1\n,\n \n1\n)\n\n\n\n# Make the first plot\n\n\nplt\n.\nplot\n(\nx\n,\n \ny_sin\n)\n\n\nplt\n.\ntitle\n(\n'Sine'\n)\n\n\n\n# Set the second subplot as active, and make the second plot.\n\n\nplt\n.\nsubplot\n(\n2\n,\n \n1\n,\n \n2\n)\n\n\nplt\n.\nplot\n(\nx\n,\n \ny_cos\n)\n\n\nplt\n.\ntitle\n(\n'Cosine'\n)\n\n\n\n# Show the figure.\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n  ![Cat Tinted](images/sine_cosine_subplot)\n\n\n\n\nYou can read much more about the \nsubplot\n function\n\nin the documentation\n.\n\n\n\n\nImages\n\n\nYou can use the \nimshow\n function to show images. Here is an example:\n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\nfrom\n \nscipy.misc\n \nimport\n \nimread\n,\n \nimresize\n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\n\nimg\n \n=\n \nimread\n(\n'assets/cat.jpg'\n)\n\n\nimg_tinted\n \n=\n \nimg\n \n*\n \n[\n1\n,\n \n0.95\n,\n \n0.9\n]\n\n\n\n# Show the original image\n\n\nplt\n.\nsubplot\n(\n1\n,\n \n2\n,\n \n1\n)\n\n\nplt\n.\nimshow\n(\nimg\n)\n\n\n\n# Show the tinted image\n\n\nplt\n.\nsubplot\n(\n1\n,\n \n2\n,\n \n2\n)\n\n\n\n# A slight gotcha with imshow is that it might give strange results\n\n\n# if presented with data that is not uint8. To work around this, we\n\n\n# explicitly cast the image to uint8 before displaying it.\n\n\nplt\n.\nimshow\n(\nnp\n.\nuint8\n(\nimg_tinted\n))\n\n\nplt\n.\nshow\n()",
            "title": "Python / Numpy Tutorial"
        },
        {
            "location": "/python-numpy-tutorial/#python",
            "text": "Python is a high-level, dynamically typed multiparadigm programming language.\nPython code is often said to be almost like pseudocode, since it allows you\nto express very powerful ideas in very few lines of code while being very\nreadable. As an example, here is an implementation of the classic quicksort\nalgorithm in Python:  def   quicksort ( arr ): \n     if   len ( arr )   <=   1 : \n         return   arr \n     pivot   =   arr [ len ( arr )   //   2 ] \n     left   =   [ x   for   x   in   arr   if   x   <   pivot ] \n     middle   =   [ x   for   x   in   arr   if   x   ==   pivot ] \n     right   =   [ x   for   x   in   arr   if   x   >   pivot ] \n     return   quicksort ( left )   +   middle   +   quicksort ( right )  print ( quicksort ([ 3 , 6 , 8 , 10 , 1 , 2 , 1 ]))  # Prints \"[1, 1, 2, 3, 6, 8, 10]\"",
            "title": "Python"
        },
        {
            "location": "/python-numpy-tutorial/#python-versions",
            "text": "There are currently two different supported versions of Python, 2.7 and 3.5.\nSomewhat confusingly, Python 3.0 introduced many backwards-incompatible changes\nto the language, so code written for 2.7 may not work under 3.5 and vice versa.\nFor this class all code will use Python 3.5.  You can check your Python version at the command line by running python --version .",
            "title": "Python versions"
        },
        {
            "location": "/python-numpy-tutorial/#basic-data-types",
            "text": "Like most languages, Python has a number of basic types including integers,\nfloats, booleans, and strings. These data types behave in ways that are\nfamiliar from other programming languages.  Numbers:  Integers and floats work as you would expect from other languages:  x   =   3  print ( type ( x ))   # Prints \"<class 'int'>\"  print ( x )         # Prints \"3\"  print ( x   +   1 )     # Addition; prints \"4\"  print ( x   -   1 )     # Subtraction; prints \"2\"  print ( x   *   2 )     # Multiplication; prints \"6\"  print ( x   **   2 )    # Exponentiation; prints \"9\"  x   +=   1  print ( x )    # Prints \"4\"  x   *=   2  print ( x )    # Prints \"8\"  y   =   2.5  print ( type ( y ))   # Prints \"<class 'float'>\"  print ( y ,   y   +   1 ,   y   *   2 ,   y   **   2 )   # Prints \"2.5 3.5 5.0 6.25\"   Note that unlike many languages, Python does not have unary increment ( x++ )\nor decrement ( x-- ) operators.  Python also has built-in types for complex numbers;\nyou can find all of the details in the documentation .  Booleans:  Python implements all of the usual operators for Boolean logic,\nbut uses English words rather than symbols ( && ,  || , etc.):  t   =   True  f   =   False  print ( type ( t ))   # Prints \"<class 'bool'>\"  print ( t   and   f )   # Logical AND; prints \"False\"  print ( t   or   f )    # Logical OR; prints \"True\"  print ( not   t )     # Logical NOT; prints \"False\"  print ( t   !=   f )    # Logical XOR; prints \"True\"   Strings:  Python has great support for strings:  hello   =   'hello'      # String literals can use single quotes  world   =   \"world\"      # or double quotes; it does not matter.  print ( hello )         # Prints \"hello\"  print ( len ( hello ))    # String length; prints \"5\"  hw   =   hello   +   ' '   +   world    # String concatenation  print ( hw )    # prints \"hello world\"  hw12   =   ' %s   %s   %d '   %   ( hello ,   world ,   12 )    # sprintf style string formatting  print ( hw12 )    # prints \"hello world 12\"   String objects have a bunch of useful methods; for example:  s   =   \"hello\"  print ( s . capitalize ())    # Capitalize a string; prints \"Hello\"  print ( s . upper ())         # Convert a string to uppercase; prints \"HELLO\"  print ( s . rjust ( 7 ))        # Right-justify a string, padding with spaces; prints \"  hello\"  print ( s . center ( 7 ))       # Center a string, padding with spaces; prints \" hello \"  print ( s . replace ( 'l' ,   '(ell)' ))    # Replace all instances of one substring with another; \n                                 # prints \"he(ell)(ell)o\"  print ( '  world ' . strip ())    # Strip leading and trailing whitespace; prints \"world\"   You can find a list of all string methods  in the documentation .",
            "title": "Basic data types"
        },
        {
            "location": "/python-numpy-tutorial/#containers",
            "text": "Python includes several built-in container types: lists, dictionaries, sets, and tuples.",
            "title": "Containers"
        },
        {
            "location": "/python-numpy-tutorial/#lists",
            "text": "A list is the Python equivalent of an array, but is resizeable\nand can contain elements of different types:  xs   =   [ 3 ,   1 ,   2 ]      # Create a list  print ( xs ,   xs [ 2 ])    # Prints \"[3, 1, 2] 2\"  print ( xs [ - 1 ])       # Negative indices count from the end of the list; prints \"2\"  xs [ 2 ]   =   'foo'       # Lists can contain elements of different types  print ( xs )           # Prints \"[3, 1, 'foo']\"  xs . append ( 'bar' )    # Add a new element to the end of the list  print ( xs )           # Prints \"[3, 1, 'foo', 'bar']\"  x   =   xs . pop ()        # Remove and return the last element of the list  print ( x ,   xs )        # Prints \"bar [3, 1, 'foo']\"   As usual, you can find all the gory details about lists in the documentation .  Slicing: \nIn addition to accessing list elements one at a time, Python provides\nconcise syntax to access sublists; this is known as  slicing :  nums   =   list ( range ( 5 ))       # range is a built-in function that creates a list of integers  print ( nums )                 # Prints \"[0, 1, 2, 3, 4]\"  print ( nums [ 2 : 4 ])            # Get a slice from index 2 to 4 (exclusive); prints \"[2, 3]\"  print ( nums [ 2 :])             # Get a slice from index 2 to the end; prints \"[2, 3, 4]\"  print ( nums [: 2 ])             # Get a slice from the start to index 2 (exclusive); prints \"[0, 1]\"  print ( nums [:])              # Get a slice of the whole list; prints \"[0, 1, 2, 3, 4]\"  print ( nums [: - 1 ])            # Slice indices can be negative; prints \"[0, 1, 2, 3]\"  nums [ 2 : 4 ]   =   [ 8 ,   9 ]          # Assign a new sublist to a slice  print ( nums )                 # Prints \"[0, 1, 8, 9, 4]\"   We will see slicing again in the context of numpy arrays.  Loops:  You can loop over the elements of a list like this:  animals   =   [ 'cat' ,   'dog' ,   'monkey' ]  for   animal   in   animals : \n     print ( animal )  # Prints \"cat\", \"dog\", \"monkey\", each on its own line.   If you want access to the index of each element within the body of a loop,\nuse the built-in  enumerate  function:  animals   =   [ 'cat' ,   'dog' ,   'monkey' ]  for   idx ,   animal   in   enumerate ( animals ): \n     print ( '# %d :  %s '   %   ( idx   +   1 ,   animal ))  # Prints \"#1: cat\", \"#2: dog\", \"#3: monkey\", each on its own line   List comprehensions: \nWhen programming, frequently we want to transform one type of data into another.\nAs a simple example, consider the following code that computes square numbers:  nums   =   [ 0 ,   1 ,   2 ,   3 ,   4 ]  squares   =   []  for   x   in   nums : \n     squares . append ( x   **   2 )  print ( squares )     # Prints [0, 1, 4, 9, 16]   You can make this code simpler using a  list comprehension :  nums   =   [ 0 ,   1 ,   2 ,   3 ,   4 ]  squares   =   [ x   **   2   for   x   in   nums ]  print ( squares )     # Prints [0, 1, 4, 9, 16]   List comprehensions can also contain conditions:  nums   =   [ 0 ,   1 ,   2 ,   3 ,   4 ]  even_squares   =   [ x   **   2   for   x   in   nums   if   x   %   2   ==   0 ]  print ( even_squares )    # Prints \"[0, 4, 16]\"",
            "title": "Lists"
        },
        {
            "location": "/python-numpy-tutorial/#dictionaries",
            "text": "A dictionary stores (key, value) pairs, similar to a  Map  in Java or\nan object in Javascript. You can use it like this:  d   =   { 'cat' :   'cute' ,   'dog' :   'furry' }    # Create a new dictionary with some data  print ( d [ 'cat' ])         # Get an entry from a dictionary; prints \"cute\"  print ( 'cat'   in   d )       # Check if a dictionary has a given key; prints \"True\"  d [ 'fish' ]   =   'wet'       # Set an entry in a dictionary  print ( d [ 'fish' ])        # Prints \"wet\"  # print(d['monkey'])  # KeyError: 'monkey' not a key of d  print ( d . get ( 'monkey' ,   'N/A' ))    # Get an element with a default; prints \"N/A\"  print ( d . get ( 'fish' ,   'N/A' ))      # Get an element with a default; prints \"wet\"  del   d [ 'fish' ]           # Remove an element from a dictionary  print ( d . get ( 'fish' ,   'N/A' ))   # \"fish\" is no longer a key; prints \"N/A\"   You can find all you need to know about dictionaries in the documentation .  Loops:  It is easy to iterate over the keys in a dictionary:  d   =   { 'person' :   2 ,   'cat' :   4 ,   'spider' :   8 }  for   animal   in   d : \n     legs   =   d [ animal ] \n     print ( 'A  %s  has  %d  legs'   %   ( animal ,   legs ))  # Prints \"A person has 2 legs\", \"A cat has 4 legs\", \"A spider has 8 legs\"   If you want access to keys and their corresponding values, use the  items  method:  d   =   { 'person' :   2 ,   'cat' :   4 ,   'spider' :   8 }  for   animal ,   legs   in   d . items (): \n     print ( 'A  %s  has  %d  legs'   %   ( animal ,   legs ))  # Prints \"A person has 2 legs\", \"A cat has 4 legs\", \"A spider has 8 legs\"   Dictionary comprehensions: \nThese are similar to list comprehensions, but allow you to easily construct\ndictionaries. For example:  nums   =   [ 0 ,   1 ,   2 ,   3 ,   4 ]  even_num_to_square   =   { x :   x   **   2   for   x   in   nums   if   x   %   2   ==   0 }  print ( even_num_to_square )    # Prints \"{0: 0, 2: 4, 4: 16}\"",
            "title": "Dictionaries"
        },
        {
            "location": "/python-numpy-tutorial/#sets",
            "text": "A set is an unordered collection of distinct elements. As a simple example, consider\nthe following:  animals   =   { 'cat' ,   'dog' }  print ( 'cat'   in   animals )     # Check if an element is in a set; prints \"True\"  print ( 'fish'   in   animals )    # prints \"False\"  animals . add ( 'fish' )         # Add an element to a set  print ( 'fish'   in   animals )    # Prints \"True\"  print ( len ( animals ))         # Number of elements in a set; prints \"3\"  animals . add ( 'cat' )          # Adding an element that is already in the set does nothing  print ( len ( animals ))         # Prints \"3\"  animals . remove ( 'cat' )       # Remove an element from a set  print ( len ( animals ))         # Prints \"2\"   As usual, everything you want to know about sets can be found in the documentation .  Loops: \nIterating over a set has the same syntax as iterating over a list;\nhowever since sets are unordered, you cannot make assumptions about the order\nin which you visit the elements of the set:  animals   =   { 'cat' ,   'dog' ,   'fish' }  for   idx ,   animal   in   enumerate ( animals ): \n     print ( '# %d :  %s '   %   ( idx   +   1 ,   animal ))  # Prints \"#1: fish\", \"#2: dog\", \"#3: cat\"   Set comprehensions: \nLike lists and dictionaries, we can easily construct sets using set comprehensions:  from   math   import   sqrt  nums   =   { int ( sqrt ( x ))   for   x   in   range ( 30 )}  print ( nums )    # Prints \"{0, 1, 2, 3, 4, 5}\"",
            "title": "Sets"
        },
        {
            "location": "/python-numpy-tutorial/#tuples",
            "text": "A tuple is an (immutable) ordered list of values.\nA tuple is in many ways similar to a list; one of the most important differences is that\ntuples can be used as keys in dictionaries and as elements of sets, while lists cannot.\nHere is a trivial example:  d   =   {( x ,   x   +   1 ):   x   for   x   in   range ( 10 )}    # Create a dictionary with tuple keys  t   =   ( 5 ,   6 )          # Create a tuple  print ( type ( t ))      # Prints \"<class 'tuple'>\"  print ( d [ t ])         # Prints \"5\"  print ( d [( 1 ,   2 )])    # Prints \"1\"   The documentation  has more information about tuples.",
            "title": "Tuples"
        },
        {
            "location": "/python-numpy-tutorial/#functions",
            "text": "Python functions are defined using the  def  keyword. For example:  def   sign ( x ): \n     if   x   >   0 : \n         return   'positive' \n     elif   x   <   0 : \n         return   'negative' \n     else : \n         return   'zero'  for   x   in   [ - 1 ,   0 ,   1 ]: \n     print ( sign ( x ))  # Prints \"negative\", \"zero\", \"positive\"   We will often define functions to take optional keyword arguments, like this:  def   hello ( name ,   loud = False ): \n     if   loud : \n         print ( 'HELLO,  %s !'   %   name . upper ()) \n     else : \n         print ( 'Hello,  %s '   %   name )  hello ( 'Bob' )   # Prints \"Hello, Bob\"  hello ( 'Fred' ,   loud = True )    # Prints \"HELLO, FRED!\"   There is a lot more information about Python functions in the documentation .",
            "title": "Functions"
        },
        {
            "location": "/python-numpy-tutorial/#classes",
            "text": "The syntax for defining classes in Python is straightforward:  class   Greeter ( object ): \n\n     # Constructor \n     def   __init__ ( self ,   name ): \n         self . name   =   name    # Create an instance variable \n\n     # Instance method \n     def   greet ( self ,   loud = False ): \n         if   loud : \n             print ( 'HELLO,  %s !'   %   self . name . upper ()) \n         else : \n             print ( 'Hello,  %s '   %   self . name )  g   =   Greeter ( 'Fred' )    # Construct an instance of the Greeter class  g . greet ()              # Call an instance method; prints \"Hello, Fred\"  g . greet ( loud = True )     # Call an instance method; prints \"HELLO, FRED!\"   You can read a lot more about Python classes in the documentation .",
            "title": "Classes"
        },
        {
            "location": "/python-numpy-tutorial/#numpy",
            "text": "Numpy  is the core library for scientific computing in Python.\nIt provides a high-performance multidimensional array object, and tools for working with these\narrays. If you are already familiar with MATLAB, you might find this tutorial useful  to get started with Numpy.",
            "title": "Numpy"
        },
        {
            "location": "/python-numpy-tutorial/#arrays",
            "text": "A numpy array is a grid of values, all of the same type, and is indexed by a tuple of\nnonnegative integers. The number of dimensions is the  rank  of the array; the  shape \nof an array is a tuple of integers giving the size of the array along each dimension.  We can initialize numpy arrays from nested Python lists,\nand access elements using square brackets:  import   numpy   as   np  a   =   np . array ([ 1 ,   2 ,   3 ])     # Create a rank 1 array  print ( type ( a ))              # Prints \"<class 'numpy.ndarray'>\"  print ( a . shape )              # Prints \"(3,)\"  print ( a [ 0 ],   a [ 1 ],   a [ 2 ])     # Prints \"1 2 3\"  a [ 0 ]   =   5                    # Change an element of the array  print ( a )                    # Prints \"[5, 2, 3]\"  b   =   np . array ([[ 1 , 2 , 3 ],[ 4 , 5 , 6 ]])      # Create a rank 2 array  print ( b . shape )                       # Prints \"(2, 3)\"  print ( b [ 0 ,   0 ],   b [ 0 ,   1 ],   b [ 1 ,   0 ])     # Prints \"1 2 4\"   Numpy also provides many functions to create arrays:  import   numpy   as   np  a   =   np . zeros (( 2 , 2 ))     # Create an array of all zeros  print ( a )                # Prints \"[[ 0.  0.] \n                       #          [ 0.  0.]]\"  b   =   np . ones (( 1 , 2 ))      # Create an array of all ones  print ( b )                # Prints \"[[ 1.  1.]]\"  c   =   np . full (( 2 , 2 ),   7 )    # Create a constant array  print ( c )                 # Prints \"[[ 7.  7.] \n                        #          [ 7.  7.]]\"  d   =   np . eye ( 2 )           # Create a 2x2 identity matrix  print ( d )                # Prints \"[[ 1.  0.] \n                       #          [ 0.  1.]]\"  e   =   np . random . random (( 2 , 2 ))    # Create an array filled with random values  print ( e )                       # Might print \"[[ 0.91940167  0.08143941] \n                              #               [ 0.68744134  0.87236687]]\"   You can read about other methods of array creation in the documentation .",
            "title": "Arrays"
        },
        {
            "location": "/python-numpy-tutorial/#array-indexing",
            "text": "Numpy offers several ways to index into arrays.  Slicing: \nSimilar to Python lists, numpy arrays can be sliced.\nSince arrays may be multidimensional, you must specify a slice for each dimension\nof the array:  import   numpy   as   np  # Create the following rank 2 array with shape (3, 4)  # [[ 1  2  3  4]  #  [ 5  6  7  8]  #  [ 9 10 11 12]]  a   =   np . array ([[ 1 , 2 , 3 , 4 ],   [ 5 , 6 , 7 , 8 ],   [ 9 , 10 , 11 , 12 ]])  # Use slicing to pull out the subarray consisting of the first 2 rows  # and columns 1 and 2; b is the following array of shape (2, 2):  # [[2 3]  #  [6 7]]  b   =   a [: 2 ,   1 : 3 ]  # A slice of an array is a view into the same data, so modifying it  # will modify the original array.  print ( a [ 0 ,   1 ])     # Prints \"2\"  b [ 0 ,   0 ]   =   77       # b[0, 0] is the same piece of data as a[0, 1]  print ( a [ 0 ,   1 ])     # Prints \"77\"   You can also mix integer indexing with slice indexing.\nHowever, doing so will yield an array of lower rank than the original array.\nNote that this is quite different from the way that MATLAB handles array\nslicing:  import   numpy   as   np  # Create the following rank 2 array with shape (3, 4)  # [[ 1  2  3  4]  #  [ 5  6  7  8]  #  [ 9 10 11 12]]  a   =   np . array ([[ 1 , 2 , 3 , 4 ],   [ 5 , 6 , 7 , 8 ],   [ 9 , 10 , 11 , 12 ]])  # Two ways of accessing the data in the middle row of the array.  # Mixing integer indexing with slices yields an array of lower rank,  # while using only slices yields an array of the same rank as the  # original array:  row_r1   =   a [ 1 ,   :]      # Rank 1 view of the second row of a  row_r2   =   a [ 1 : 2 ,   :]    # Rank 2 view of the second row of a  print ( row_r1 ,   row_r1 . shape )    # Prints \"[5 6 7 8] (4,)\"  print ( row_r2 ,   row_r2 . shape )    # Prints \"[[5 6 7 8]] (1, 4)\"  # We can make the same distinction when accessing columns of an array:  col_r1   =   a [:,   1 ]  col_r2   =   a [:,   1 : 2 ]  print ( col_r1 ,   col_r1 . shape )    # Prints \"[ 2  6 10] (3,)\"  print ( col_r2 ,   col_r2 . shape )    # Prints \"[[ 2] \n                              #          [ 6] \n                              #          [10]] (3, 1)\"   Integer array indexing: \nWhen you index into numpy arrays using slicing, the resulting array view\nwill always be a subarray of the original array. In contrast, integer array\nindexing allows you to construct arbitrary arrays using the data from another\narray. Here is an example:  import   numpy   as   np  a   =   np . array ([[ 1 , 2 ],   [ 3 ,   4 ],   [ 5 ,   6 ]])  # An example of integer array indexing.  # The returned array will have shape (3,) and  print ( a [[ 0 ,   1 ,   2 ],   [ 0 ,   1 ,   0 ]])    # Prints \"[1 4 5]\"  # The above example of integer array indexing is equivalent to this:  print ( np . array ([ a [ 0 ,   0 ],   a [ 1 ,   1 ],   a [ 2 ,   0 ]]))    # Prints \"[1 4 5]\"  # When using integer array indexing, you can reuse the same  # element from the source array:  print ( a [[ 0 ,   0 ],   [ 1 ,   1 ]])    # Prints \"[2 2]\"  # Equivalent to the previous integer array indexing example  print ( np . array ([ a [ 0 ,   1 ],   a [ 0 ,   1 ]]))    # Prints \"[2 2]\"   One useful trick with integer array indexing is selecting or mutating one\nelement from each row of a matrix:  import   numpy   as   np  # Create a new array from which we will select elements  a   =   np . array ([[ 1 , 2 , 3 ],   [ 4 , 5 , 6 ],   [ 7 , 8 , 9 ],   [ 10 ,   11 ,   12 ]])  print ( a )    # prints \"array([[ 1,  2,  3], \n           #                [ 4,  5,  6], \n           #                [ 7,  8,  9], \n           #                [10, 11, 12]])\"  # Create an array of indices  b   =   np . array ([ 0 ,   2 ,   0 ,   1 ])  # Select one element from each row of a using the indices in b  print ( a [ np . arange ( 4 ),   b ])    # Prints \"[ 1  6  7 11]\"  # Mutate one element from each row of a using the indices in b  a [ np . arange ( 4 ),   b ]   +=   10  print ( a )    # prints \"array([[11,  2,  3], \n           #                [ 4,  5, 16], \n           #                [17,  8,  9], \n           #                [10, 21, 12]])   Boolean array indexing: \nBoolean array indexing lets you pick out arbitrary elements of an array.\nFrequently this type of indexing is used to select the elements of an array\nthat satisfy some condition. Here is an example:  import   numpy   as   np  a   =   np . array ([[ 1 , 2 ],   [ 3 ,   4 ],   [ 5 ,   6 ]])  bool_idx   =   ( a   >   2 )     # Find the elements of a that are bigger than 2; \n                      # this returns a numpy array of Booleans of the same \n                      # shape as a, where each slot of bool_idx tells \n                      # whether that element of a is > 2.  print ( bool_idx )        # Prints \"[[False False] \n                      #          [ True  True] \n                      #          [ True  True]]\"  # We use boolean array indexing to construct a rank 1 array  # consisting of the elements of a corresponding to the True values  # of bool_idx  print ( a [ bool_idx ])    # Prints \"[3 4 5 6]\"  # We can do all of the above in a single concise statement:  print ( a [ a   >   2 ])       # Prints \"[3 4 5 6]\"   For brevity we have left out a lot of details about numpy array indexing;\nif you want to know more you should read the documentation .",
            "title": "Array indexing"
        },
        {
            "location": "/python-numpy-tutorial/#datatypes",
            "text": "Every numpy array is a grid of elements of the same type.\nNumpy provides a large set of numeric datatypes that you can use to construct arrays.\nNumpy tries to guess a datatype when you create an array, but functions that construct\narrays usually also include an optional argument to explicitly specify the datatype.\nHere is an example:  import   numpy   as   np  x   =   np . array ([ 1 ,   2 ])     # Let numpy choose the datatype  print ( x . dtype )           # Prints \"int64\"  x   =   np . array ([ 1.0 ,   2.0 ])     # Let numpy choose the datatype  print ( x . dtype )               # Prints \"float64\"  x   =   np . array ([ 1 ,   2 ],   dtype = np . int64 )     # Force a particular datatype  print ( x . dtype )                           # Prints \"int64\"   You can read all about numpy datatypes in the documentation .",
            "title": "Datatypes"
        },
        {
            "location": "/python-numpy-tutorial/#array-math",
            "text": "Basic mathematical functions operate elementwise on arrays, and are available\nboth as operator overloads and as functions in the numpy module:  import   numpy   as   np  x   =   np . array ([[ 1 , 2 ],[ 3 , 4 ]],   dtype = np . float64 )  y   =   np . array ([[ 5 , 6 ],[ 7 , 8 ]],   dtype = np . float64 )  # Elementwise sum; both produce the array  # [[ 6.0  8.0]  #  [10.0 12.0]]  print ( x   +   y )  print ( np . add ( x ,   y ))  # Elementwise difference; both produce the array  # [[-4.0 -4.0]  #  [-4.0 -4.0]]  print ( x   -   y )  print ( np . subtract ( x ,   y ))  # Elementwise product; both produce the array  # [[ 5.0 12.0]  #  [21.0 32.0]]  print ( x   *   y )  print ( np . multiply ( x ,   y ))  # Elementwise division; both produce the array  # [[ 0.2         0.33333333]  #  [ 0.42857143  0.5       ]]  print ( x   /   y )  print ( np . divide ( x ,   y ))  # Elementwise square root; produces the array  # [[ 1.          1.41421356]  #  [ 1.73205081  2.        ]]  print ( np . sqrt ( x ))   Note that unlike MATLAB,  *  is elementwise multiplication, not matrix\nmultiplication. We instead use the  dot  function to compute inner\nproducts of vectors, to multiply a vector by a matrix, and to\nmultiply matrices.  dot  is available both as a function in the numpy\nmodule and as an instance method of array objects:  import   numpy   as   np  x   =   np . array ([[ 1 , 2 ],[ 3 , 4 ]])  y   =   np . array ([[ 5 , 6 ],[ 7 , 8 ]])  v   =   np . array ([ 9 , 10 ])  w   =   np . array ([ 11 ,   12 ])  # Inner product of vectors; both produce 219  print ( v . dot ( w ))  print ( np . dot ( v ,   w ))  # Matrix / vector product; both produce the rank 1 array [29 67]  print ( x . dot ( v ))  print ( np . dot ( x ,   v ))  # Matrix / matrix product; both produce the rank 2 array  # [[19 22]  #  [43 50]]  print ( x . dot ( y ))  print ( np . dot ( x ,   y ))   Numpy provides many useful functions for performing computations on\narrays; one of the most useful is  sum :  import   numpy   as   np  x   =   np . array ([[ 1 , 2 ],[ 3 , 4 ]])  print ( np . sum ( x ))    # Compute sum of all elements; prints \"10\"  print ( np . sum ( x ,   axis = 0 ))    # Compute sum of each column; prints \"[4 6]\"  print ( np . sum ( x ,   axis = 1 ))    # Compute sum of each row; prints \"[3 7]\"   You can find the full list of mathematical functions provided by numpy in the documentation .  Apart from computing mathematical functions using arrays, we frequently\nneed to reshape or otherwise manipulate data in arrays. The simplest example\nof this type of operation is transposing a matrix; to transpose a matrix,\nsimply use the  T  attribute of an array object:  import   numpy   as   np  x   =   np . array ([[ 1 , 2 ],   [ 3 , 4 ]])  print ( x )      # Prints \"[[1 2] \n             #          [3 4]]\"  print ( x . T )    # Prints \"[[1 3] \n             #          [2 4]]\"  # Note that taking the transpose of a rank 1 array does nothing:  v   =   np . array ([ 1 , 2 , 3 ])  print ( v )      # Prints \"[1 2 3]\"  print ( v . T )    # Prints \"[1 2 3]\"   Numpy provides many more functions for manipulating arrays; you can see the full list in the documentation .",
            "title": "Array math"
        },
        {
            "location": "/python-numpy-tutorial/#broadcasting",
            "text": "Broadcasting is a powerful mechanism that allows numpy to work with arrays of different\nshapes when performing arithmetic operations. Frequently we have a smaller array and a\nlarger array, and we want to use the smaller array multiple times to perform some operation\non the larger array.  For example, suppose that we want to add a constant vector to each\nrow of a matrix. We could do it like this:  import   numpy   as   np  # We will add the vector v to each row of the matrix x,  # storing the result in the matrix y  x   =   np . array ([[ 1 , 2 , 3 ],   [ 4 , 5 , 6 ],   [ 7 , 8 , 9 ],   [ 10 ,   11 ,   12 ]])  v   =   np . array ([ 1 ,   0 ,   1 ])  y   =   np . empty_like ( x )     # Create an empty matrix with the same shape as x  # Add the vector v to each row of the matrix x with an explicit loop  for   i   in   range ( 4 ): \n     y [ i ,   :]   =   x [ i ,   :]   +   v  # Now y is the following  # [[ 2  2  4]  #  [ 5  5  7]  #  [ 8  8 10]  #  [11 11 13]]  print ( y )   This works; however when the matrix  x  is very large, computing an explicit loop\nin Python could be slow. Note that adding the vector  v  to each row of the matrix x  is equivalent to forming a matrix  vv  by stacking multiple copies of  v  vertically,\nthen performing elementwise summation of  x  and  vv . We could implement this\napproach like this:  import   numpy   as   np  # We will add the vector v to each row of the matrix x,  # storing the result in the matrix y  x   =   np . array ([[ 1 , 2 , 3 ],   [ 4 , 5 , 6 ],   [ 7 , 8 , 9 ],   [ 10 ,   11 ,   12 ]])  v   =   np . array ([ 1 ,   0 ,   1 ])  vv   =   np . tile ( v ,   ( 4 ,   1 ))     # Stack 4 copies of v on top of each other  print ( vv )                   # Prints \"[[1 0 1] \n                           #          [1 0 1] \n                           #          [1 0 1] \n                           #          [1 0 1]]\"  y   =   x   +   vv    # Add x and vv elementwise  print ( y )    # Prints \"[[ 2  2  4 \n           #          [ 5  5  7] \n           #          [ 8  8 10] \n           #          [11 11 13]]\"   Numpy broadcasting allows us to perform this computation without actually\ncreating multiple copies of  v . Consider this version, using broadcasting:  import   numpy   as   np  # We will add the vector v to each row of the matrix x,  # storing the result in the matrix y  x   =   np . array ([[ 1 , 2 , 3 ],   [ 4 , 5 , 6 ],   [ 7 , 8 , 9 ],   [ 10 ,   11 ,   12 ]])  v   =   np . array ([ 1 ,   0 ,   1 ])  y   =   x   +   v    # Add v to each row of x using broadcasting  print ( y )    # Prints \"[[ 2  2  4] \n           #          [ 5  5  7] \n           #          [ 8  8 10] \n           #          [11 11 13]]\"   The line  y = x + v  works even though  x  has shape  (4, 3)  and  v  has shape (3,)  due to broadcasting; this line works as if  v  actually had shape  (4, 3) ,\nwhere each row was a copy of  v , and the sum was performed elementwise.  Broadcasting two arrays together follows these rules:   If the arrays do not have the same rank, prepend the shape of the lower rank array\n   with 1s until both shapes have the same length.  The two arrays are said to be  compatible  in a dimension if they have the same\n   size in the dimension, or if one of the arrays has size 1 in that dimension.  The arrays can be broadcast together if they are compatible in all dimensions.  After broadcasting, each array behaves as if it had shape equal to the elementwise\n   maximum of shapes of the two input arrays.  In any dimension where one array had size 1 and the other array had size greater than 1,\n   the first array behaves as if it were copied along that dimension   If this explanation does not make sense, try reading the explanation from the documentation \nor  this explanation .  Functions that support broadcasting are known as  universal functions . You can find\nthe list of all universal functions in the documentation .  Here are some applications of broadcasting:  import   numpy   as   np  # Compute outer product of vectors  v   =   np . array ([ 1 , 2 , 3 ])    # v has shape (3,)  w   =   np . array ([ 4 , 5 ])      # w has shape (2,)  # To compute an outer product, we first reshape v to be a column  # vector of shape (3, 1); we can then broadcast it against w to yield  # an output of shape (3, 2), which is the outer product of v and w:  # [[ 4  5]  #  [ 8 10]  #  [12 15]]  print ( np . reshape ( v ,   ( 3 ,   1 ))   *   w )  # Add a vector to each row of a matrix  x   =   np . array ([[ 1 , 2 , 3 ],   [ 4 , 5 , 6 ]])  # x has shape (2, 3) and v has shape (3,) so they broadcast to (2, 3),  # giving the following matrix:  # [[2 4 6]  #  [5 7 9]]  print ( x   +   v )  # Add a vector to each column of a matrix  # x has shape (2, 3) and w has shape (2,).  # If we transpose x then it has shape (3, 2) and can be broadcast  # against w to yield a result of shape (3, 2); transposing this result  # yields the final result of shape (2, 3) which is the matrix x with  # the vector w added to each column. Gives the following matrix:  # [[ 5  6  7]  #  [ 9 10 11]]  print (( x . T   +   w ) . T )  # Another solution is to reshape w to be a column vector of shape (2, 1);  # we can then broadcast it directly against x to produce the same  # output.  print ( x   +   np . reshape ( w ,   ( 2 ,   1 )))  # Multiply a matrix by a constant:  # x has shape (2, 3). Numpy treats scalars as arrays of shape ();  # these can be broadcast together to shape (2, 3), producing the  # following array:  # [[ 2  4  6]  #  [ 8 10 12]]  print ( x   *   2 )   Broadcasting typically makes your code more concise and faster, so you\nshould strive to use it where possible.",
            "title": "Broadcasting"
        },
        {
            "location": "/python-numpy-tutorial/#numpy-documentation",
            "text": "This brief overview has touched on many of the important things that you need to\nknow about numpy, but is far from complete. Check out the numpy reference \nto find out much more about numpy.",
            "title": "Numpy Documentation"
        },
        {
            "location": "/python-numpy-tutorial/#scipy",
            "text": "Numpy provides a high-performance multidimensional array and basic tools to\ncompute with and manipulate these arrays. SciPy \nbuilds on this, and provides\na large number of functions that operate on numpy arrays and are useful for\ndifferent types of scientific and engineering applications.  The best way to get familiar with SciPy is to browse the documentation .\nWe will highlight some parts of SciPy that you might find useful for this class.",
            "title": "SciPy"
        },
        {
            "location": "/python-numpy-tutorial/#image-operations",
            "text": "SciPy provides some basic functions to work with images.\nFor example, it has functions to read images from disk into numpy arrays,\nto write numpy arrays to disk as images, and to resize images.\nHere is a simple example that showcases these functions:  from   scipy.misc   import   imread ,   imsave ,   imresize  # Read an JPEG image into a numpy array  img   =   imread ( 'assets/cat.jpg' )  print ( img . dtype ,   img . shape )    # Prints \"uint8 (400, 248, 3)\"  # We can tint the image by scaling each of the color channels  # by a different scalar constant. The image has shape (400, 248, 3);  # we multiply it by the array [1, 0.95, 0.9] of shape (3,);  # numpy broadcasting means that this leaves the red channel unchanged,  # and multiplies the green and blue channels by 0.95 and 0.9  # respectively.  img_tinted   =   img   *   [ 1 ,   0.95 ,   0.9 ]  # Resize the tinted image to be 300 by 300 pixels.  img_tinted   =   imresize ( img_tinted ,   ( 300 ,   300 ))  # Write the tinted image back to disk  imsave ( 'assets/cat_tinted.jpg' ,   img_tinted )     \n  Left: The original image.\n  Right: The tinted and resized image.",
            "title": "Image operations"
        },
        {
            "location": "/python-numpy-tutorial/#matlab-files",
            "text": "The functions  scipy.io.loadmat  and  scipy.io.savemat  allow you to read and\nwrite MATLAB files. You can read about them in the documentation .",
            "title": "MATLAB files"
        },
        {
            "location": "/python-numpy-tutorial/#distance-between-points",
            "text": "SciPy defines some useful functions for computing distances between sets of points.  The function  scipy.spatial.distance.pdist  computes the distance between all pairs\nof points in a given set:  import   numpy   as   np  from   scipy.spatial.distance   import   pdist ,   squareform  # Create the following array where each row is a point in 2D space:  # [[0 1]  #  [1 0]  #  [2 0]]  x   =   np . array ([[ 0 ,   1 ],   [ 1 ,   0 ],   [ 2 ,   0 ]])  print ( x )  # Compute the Euclidean distance between all rows of x.  # d[i, j] is the Euclidean distance between x[i, :] and x[j, :],  # and d is the following array:  # [[ 0.          1.41421356  2.23606798]  #  [ 1.41421356  0.          1.        ]  #  [ 2.23606798  1.          0.        ]]  d   =   squareform ( pdist ( x ,   'euclidean' ))  print ( d )   You can read all the details about this function in the documentation .  A similar function ( scipy.spatial.distance.cdist ) computes the distance between all pairs\nacross two sets of points; you can read about it in the documentation .",
            "title": "Distance between points"
        },
        {
            "location": "/python-numpy-tutorial/#matplotlib",
            "text": "Matplotlib  is a plotting library.\nIn this section give a brief introduction to the  matplotlib.pyplot  module,\nwhich provides a plotting system similar to that of MATLAB.",
            "title": "Matplotlib"
        },
        {
            "location": "/python-numpy-tutorial/#plotting",
            "text": "The most important function in matplotlib is  plot ,\nwhich allows you to plot 2D data. Here is a simple example:  import   numpy   as   np  import   matplotlib.pyplot   as   plt  # Compute the x and y coordinates for points on a sine curve  x   =   np . arange ( 0 ,   3   *   np . pi ,   0.1 )  y   =   np . sin ( x )  # Plot the points using matplotlib  plt . plot ( x ,   y )  plt . show ()    # You must call plt.show() to make graphics appear.   Running this code produces the following plot:   With just a little bit of extra work we can easily plot multiple lines\nat once, and add a title, legend, and axis labels:  import   numpy   as   np  import   matplotlib.pyplot   as   plt  # Compute the x and y coordinates for points on sine and cosine curves  x   =   np . arange ( 0 ,   3   *   np . pi ,   0.1 )  y_sin   =   np . sin ( x )  y_cos   =   np . cos ( x )  # Plot the points using matplotlib  plt . plot ( x ,   y_sin )  plt . plot ( x ,   y_cos )  plt . xlabel ( 'x axis label' )  plt . ylabel ( 'y axis label' )  plt . title ( 'Sine and Cosine' )  plt . legend ([ 'Sine' ,   'Cosine' ])  plt . show ()    You can read much more about the  plot  function in the documentation .",
            "title": "Plotting"
        },
        {
            "location": "/python-numpy-tutorial/#subplots",
            "text": "You can plot different things in the same figure using the  subplot  function.\nHere is an example:  import   numpy   as   np  import   matplotlib.pyplot   as   plt  # Compute the x and y coordinates for points on sine and cosine curves  x   =   np . arange ( 0 ,   3   *   np . pi ,   0.1 )  y_sin   =   np . sin ( x )  y_cos   =   np . cos ( x )  # Set up a subplot grid that has height 2 and width 1,  # and set the first such subplot as active.  plt . subplot ( 2 ,   1 ,   1 )  # Make the first plot  plt . plot ( x ,   y_sin )  plt . title ( 'Sine' )  # Set the second subplot as active, and make the second plot.  plt . subplot ( 2 ,   1 ,   2 )  plt . plot ( x ,   y_cos )  plt . title ( 'Cosine' )  # Show the figure.  plt . show ()   \n  ![Cat Tinted](images/sine_cosine_subplot)  You can read much more about the  subplot  function in the documentation .",
            "title": "Subplots"
        },
        {
            "location": "/python-numpy-tutorial/#images",
            "text": "You can use the  imshow  function to show images. Here is an example:  import   numpy   as   np  from   scipy.misc   import   imread ,   imresize  import   matplotlib.pyplot   as   plt  img   =   imread ( 'assets/cat.jpg' )  img_tinted   =   img   *   [ 1 ,   0.95 ,   0.9 ]  # Show the original image  plt . subplot ( 1 ,   2 ,   1 )  plt . imshow ( img )  # Show the tinted image  plt . subplot ( 1 ,   2 ,   2 )  # A slight gotcha with imshow is that it might give strange results  # if presented with data that is not uint8. To work around this, we  # explicitly cast the image to uint8 before displaying it.  plt . imshow ( np . uint8 ( img_tinted ))  plt . show ()",
            "title": "Images"
        },
        {
            "location": "/ipython-tutorial/",
            "text": "(Note: some of the screenshots here may be out-of-date. However, this should still prove\nuseful as a quick intro, and for the general menu layout, etc.)\n\n\nIn this class, we will use IPython notebooks (more recently known as \n\nJupyter notebooks\n) for the programming assignments. \nAn IPython notebook lets you write and execute Python code in your web browser. \nIPython notebooks make it very easy to tinker with code and execute it in bits \nand pieces; for this reason IPython notebooks are widely used in scientific \ncomputing.\n\n\n\n\n\nOnce you have it installed, start it with this command:\n\n\njupyter notebook\n\n\n\n\n\nOnce your notebook server is running, point your web browser at http://localhost:8888 to\nstart using your notebooks. If everything worked correctly, you should\nsee a screen like this, showing all available IPython notebooks in the current\ndirectory:\n\n\n\n\nIf you click through to a notebook file, you will see a screen like this:\n\n\n\n\nAn IPython notebook is made up of a number of \ncells\n. Each cell can contain\nPython code. You can execute a cell by clicking on it and pressing \nShift-Enter\n.\nWhen you do so, the code in the cell will run, and the output of the cell\nwill be displayed beneath the cell. For example, after running the first cell\nthe notebook looks like this:\n\n\n\n\nGlobal variables are shared between cells. Executing the second cell thus gives\nthe following result:\n\n\n\n\nBy convention, IPython notebooks are expected to be run from top to bottom.\nFailing to execute some cells or executing cells out of order can result in\nerrors:\n\n\n\n\nAfter you have modified an IPython notebook for one of the assignments by\nmodifying or executing some of its cells, remember to \nsave your changes!\n\n\n\n\nThis has only been a brief introduction to IPython notebooks, but it should\nbe enough to get you up and running on the assignments for this course.",
            "title": "Jupyter Notebook Tutorial"
        },
        {
            "location": "/lecture1/",
            "text": "Check the slides \nhere",
            "title": "Lecture 1 - Introduction"
        },
        {
            "location": "/lecture2/",
            "text": "Check the slides \nhere",
            "title": "Lecture 2 - Agent, Environment, Rewards"
        }
    ]
}